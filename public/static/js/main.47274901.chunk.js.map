{"version":3,"sources":["fetchUtils.js","components/Task.js","components/AddTask.js","components/AuthContext.js","jwtUtils.js","components/ListOfTasks.js","components/SignIn.js","components/ProtectedRoute.js","components/Test.js","components/CreateUser.js","components/Title.js","components/MainRouter.js","App.js","serviceWorker.js","index.js","const.js"],"names":["createNewUser","user","token","createObj","doc","fetch","uriBase","userApi","method","headers","body","JSON","stringify","then","httpResult","ok","Error","json","catch","error","console","log","deleteUser","_id","updateUser","userId","updatedUser","updateTask","taskId","change","currentApi","deleteTask","Task","props","React","useState","task","isComplete","setIsComplete","textDecorationLine","style","setStyle","checked","setChecked","updateLook","Grid","container","spacing","justify","alignItems","item","xs","Checkbox","onChange","event","target","color","onClick","result","refresh","textAlign","text","IconButton","aria-label","setIsEdit","setText","setEditId","fontSize","removeTask","response","onChangeHandler","value","keyCode","onClickAdd","backgroundColor","padding","height","isEdit","margin","width","type","onKeyUp","onClickEdit","AuthContext","createContext","AuthProvider","loggedIn","setLoggedIn","window","localStorage","getItem","setToken","admin","setAdmin","Provider","children","AuthConsumer","Consumer","verifyToken","key","Promise","resolve","reject","jwt","verify","payload","listStyle","listStyleType","dateStyle","ListOfTasks","setUser","tasks","setTasks","editId","useContext","JWT_KEY","getTasksByUserId","history","push","useEffect","currentDate","Date","firstName","lastName","reduce","displayArr","currentTask","date","toLocaleDateString","map","index","tasksToDisplayArray","alert","newTask","createNewTask","removeItem","SignIn","email","setEmail","password","setPassword","name","parsed","queryString","parseUrl","location","href","query","setItem","localToken","message","src","alt","to","ProtectedRoute","Component","component","rest","render","Test","CreateUser","users","setUsers","setFirstName","setLastName","clearUserState","a","newUser","onUserEditClick","onUserDeleteClick","onClickDelete","getAllUsers","getAllTasks","float","filter","foundTask","forEach","Title","MainRouter","path","App","className","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","DUMMY_DATA","module","exports"],"mappings":"wWA6EaA,EAAgB,SAACC,EAAMC,GAEhC,IAAIC,EAAY,GAGhB,OAFAA,EAAUC,IAAMH,EAETI,MAAM,GAAD,OAAIC,WAAJ,OAAcC,UAAd,WAA+B,CACvCC,OAAQ,OACRC,QAAS,CACL,cAAgB,UAAhB,OAA2BP,GAC3B,eAAgB,oBAEpBQ,KAAMC,KAAKC,UAAUT,KAExBU,MAAK,SAAAC,GACF,IAAIA,EAAWC,GACX,MAAM,IAAIC,MAAM,wBAGpB,OAAOF,EAAWG,UAErBC,OAAM,SAAAC,GACHC,QAAQC,IAAIF,OAKPG,EAAa,SAACrB,EAAMC,GAE7B,OAAOG,MAAM,GAAD,OAAIC,WAAJ,OAAcC,UAAd,mBAAgCN,EAAKsB,KAAM,CACnDf,OAAQ,SACRC,QAAS,CACL,cAAgB,UAAhB,OAA2BP,GAC3B,eAAgB,sBAGvBW,MAAK,SAAAC,GACF,IAAKA,EAAWC,GACZ,MAAM,IAAIC,MAAM,gBAGpB,OAAOF,EAAWG,WA2BbO,EAAa,SAACC,EAAOC,EAAaxB,GAE3C,OAAOG,MAAM,GAAD,OAAIC,WAAJ,OAAcC,UAAd,mBAAgCkB,GAAU,CAClDjB,OAAQ,QACRC,QAAS,CACL,cAAgB,UAAhB,OAA2BP,GAC3B,eAAgB,oBAEpBQ,KAAMC,KAAKC,UAAUc,KAGxBb,MAAK,SAAAC,GACF,IAAIA,EAAWC,GACX,MAAM,IAAIC,MAAM,yBAGpB,OAAOF,EAAWG,UAErBC,OAAM,SAAAC,GACHC,QAAQC,IAAIF,OAMPQ,EAAa,SAACC,EAAQC,GAE/B,IAAInB,EAAO,GAWX,cATUmB,UAAiB,EAEvBnB,EAAO,CAAC,YAAemB,GAED,iBAAVA,IAEZnB,EAAO,CAAC,KAAQmB,IAGbxB,MAAM,GAAD,OAAIC,WAAJ,OAAcwB,aAAd,YAA4BF,GAAU,CAC9CpB,OAAQ,QACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUF,KAEpBG,MAAK,SAAAC,GACF,IAAKA,EAAWC,GACZ,MAAM,IAAIC,MAAM,8BAGpB,OAAOF,KAEVI,OAAM,SAAAC,GACHC,QAAQC,IAAIF,OAKXY,EAAa,SAACH,GAEvB,OAAOvB,MAAM,GAAD,OAAIC,WAAJ,OAAcwB,aAAd,YAA4BF,GAAU,CAC9CpB,OAAQ,SACRC,QAAS,CACL,eAAgB,sBAGvBI,MAAK,SAAAC,GACF,IAAKA,EAAWC,GACZ,MAAM,IAAIC,MAAM,gBAGpB,OAAOF,EAAWG,W,+DC/MX,SAASe,EAAKC,GAAQ,IAAD,EACIC,IAAMC,SAASF,EAAMG,KAAKC,YAD9B,mBACzBA,EADyB,KACbC,EADa,OAENJ,IAAMC,SAASE,EAAa,CAACE,mBAAoB,gBAAkB,IAF7D,mBAEzBC,EAFyB,KAElBC,EAFkB,OAGFP,IAAMC,SAASE,GAHb,mBAGzBK,EAHyB,KAGhBC,EAHgB,KAK1BC,EAAa,WAEXP,GAKAI,EAAS,CAACF,mBAAoB,SAC9BD,GAAc,GACdK,GAAW,KANXF,EAAS,CAACF,mBAAoB,iBAC9BD,GAAc,GACdK,GAAW,KAmDnB,OACI,6BACA,6BACI,kBAACE,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,QAAQ,SAASC,WAAW,YACpD,kBAACJ,EAAA,EAAD,CAAMK,MAAI,EAACC,IAAE,IACb,kBAACN,EAAA,EAAD,CAAMK,MAAI,EAACC,IAAE,GACjB,kBAACC,EAAA,EAAD,CACIV,QAASA,EACTW,SAAU,SAACC,GAAD,OAAWX,EAAWW,EAAMC,OAAOb,UAC7Cc,MAAM,UACNC,QApDY,WAGpB9B,EAAWM,EAAMG,KAAKb,IAAKc,GAC1BxB,MAAK,SAAA6C,GAGFpB,EAAcoB,EAAOrB,YACrBJ,EAAM0B,UACNf,OAEH1B,OAAM,SAAAC,GACHC,QAAQC,IAAIF,UA2CZ,kBAAC0B,EAAA,EAAD,CAAMK,MAAI,EAACC,IAAE,GACT,yBAAKX,MAAO,CAACoB,UAAW,WACxB,yBAAKpB,MAAOA,GAAZ,UACQP,EAAMG,KAAKyB,SAIvB,kBAAChB,EAAA,EAAD,CAAMK,MAAI,EAACC,IAAE,GACb,kBAACW,EAAA,EAAD,CAAYC,aAAW,OAAON,QA5BlB,WAChBxB,EAAM+B,WAAU,GAChB/B,EAAMgC,QAAQhC,EAAMG,KAAKyB,MACzB5B,EAAMiC,UAAUjC,EAAMG,KAAKb,OA0BnB,kBAAC,IAAD,CAAU4C,SAAS,WAGvB,kBAACL,EAAA,EAAD,CAAYC,aAAW,SAASN,QAnDlB,WAElB,IAAIW,EAAanC,EAAMG,KAGvBL,EAAWqC,EAAW7C,KACrBV,MAAK,SAAAwD,GAEHpC,EAAM0B,aAER9C,MAAM,SAAA6C,GACHd,OAGH1B,OAAM,SAAAC,GACHC,QAAQC,IAAIF,QAqCZ,kBAAC,IAAD,CAAYgD,SAAS,YAGrB,kBAACtB,EAAA,EAAD,CAAMK,MAAI,EAACC,IAAE,OChGV,SAASnB,EAAKC,GAEzB,IAAMqC,EAAkB,SAAChB,GAErBrB,EAAMgC,QAAQX,EAAMC,OAAOgB,OAEN,KAAlBjB,EAAMkB,SACLvC,EAAMwC,WAAWnB,IAkBzB,OACI,yBAAKd,MAAO,CAACkC,gBAAiB,YAAaC,QAAS,OAAQC,OAAQ,SAC/D3C,EAAM4C,OAAS,aAAc,YACjC,2BAAOrC,MAAO,CAACsC,OAAQ,MAAOF,OAAQ,MAAOG,MAAO,MAAOZ,SAAU,QACpEa,KAAK,OAAO3B,SAAUiB,EAAiBC,MAAOtC,EAAM4B,KAAMoB,QAASX,IAhBjErC,EAAM4C,OAMF,4BAAQpB,QAASxB,EAAMiD,aAAvB,QAJA,4BAAQzB,QAASxB,EAAMwC,YAAvB,QCfhB,IAAMU,EAAcjD,IAAMkD,cAAc,IAElCC,EAAe,SAACpD,GAAW,IAAD,EAEIC,IAAMC,UAAS,GAFnB,mBAErBmD,EAFqB,KAEXC,EAFW,OAGFrD,IAAMC,SAASqD,OAAOC,aAAaC,QAAQ,UAHzC,mBAGrBxF,EAHqB,KAGdyF,EAHc,OAIFzD,IAAMC,UAAS,GAJb,mBAIrByD,EAJqB,KAIdC,EAJc,KAW5B,OACI,6BACI,kBAACV,EAAYW,SAAb,CAAsBvB,MAAQ,CAACe,WAAUC,cAAarF,QAAOyF,WAAUC,QAAOC,aACzE5D,EAAM8D,YAMjBC,EAAeb,EAAYc,S,kBCtB1B,SAASC,EAAYhG,EAAOiG,GAE/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAEzBC,IAAIC,OAAOtG,EAAOiG,GAAK,SAAChF,EAAOsF,GAEb,OAAVtF,EACAmF,EAAOnF,GAEPkF,EAAQI,SCAxB,IAAMC,EAAY,CAEdC,cAAe,QAGbC,EAAY,CAEdD,cAAe,OACfjC,gBAAiB,aAGN,SAASmC,EAAY5E,GAAQ,IAAD,EACfC,IAAMC,SAAS,IADA,mBAChClC,EADgC,KAC1B6G,EAD0B,OAEb5E,IAAMC,SAAS,IAFF,mBAEhC4E,EAFgC,KAEzBC,EAFyB,OAGf9E,IAAMC,SAAS,IAHA,mBAGhC0B,EAHgC,KAG1BI,EAH0B,OAIX/B,IAAMC,UAAS,GAJJ,mBAIhC0C,EAJgC,KAIxBb,EAJwB,OAKX9B,IAAMC,SAAS,IALJ,mBAKhC8E,EALgC,KAKxB/C,EALwB,OAODhC,IAAMgF,WAAW/B,GAA/CS,EAP+B,EAO/BA,MAAOC,EAPwB,EAOxBA,SAAUF,EAPc,EAOdA,SAEnBhC,EAAU,WAGZuC,EAAYV,OAAOC,aAAaC,QAAQ,SAAUyB,WAC7CtG,MAAK,SAAA4F,GAEF,OAAOA,EAAQxG,QAElBY,MAAK,SAAAZ,GAGF6G,EAAQ7G,GACR4F,EAAS5F,EAAK2F,OLpCE,SAAC3F,GAE7B,OAAOI,MAAM,GAAD,OAAIC,WAAJ,OAAcwB,aAAd,YAA4B7B,EAAKsB,KAAO,CAChDf,OAAQ,MACRC,QAAS,CACL,eAAgB,sBAGnBI,MAAK,SAAAC,GACF,IAAKA,EAAWC,GACZ,MAAM,IAAIC,MAAM,gBAGpB,OAAOF,EAAWG,UAErBC,OAAM,SAAAC,GAEHC,QAAQC,IAAIF,MKsBRiG,CAAiBnH,GAChBY,MAAK,SAAAkG,GACFC,EAASD,SAIhB7F,OAAM,SAAAC,GAEHC,QAAQC,IAAIF,GACZc,EAAMoF,QAAQC,KAAK,SAsD/BpF,IAAMqF,WAAU,WAEZ5D,MACD,IAEH,IAuDI6D,EAAc,IAAIC,KAAK,GAE3B,OACI,6BACI,sCAAQxH,EAAKyH,UAAb,YAA0BzH,EAAK0H,SAA/B,cAEA,6BACI,wBAAInF,MAAO,CAAEmC,QAAS,IA9DN,SAACoC,GAMzB,OAAOA,EAAMa,QAAO,SAACC,EAAYC,GAkB7B,OAfI,IAAIL,KAAKK,EAAYC,MAAMC,uBAC3B,IAAIP,KAAKD,GAAaQ,sBAGtBR,EAAcM,EAAYC,KAG1BF,EAAWP,KAAKE,GAChBK,EAAWP,KAAKQ,IAIhBD,EAAWP,KAAKQ,GAGbD,IAER,IACFI,KAAI,SAAC7F,EAAM8F,GAIR,OAKI9F,EAAKyB,KACD,wBAAIrB,MAAOkE,EAAWP,IAAK+B,GACvB,kBAAClG,EAAD,CAAMI,KAAMA,EACRuB,QAASA,EACTK,UAAWA,EACXC,QAASA,EACTC,UAAWA,KAKf,wBAAI1B,MAAOoE,EAAWT,IAAK+B,GAA3B,gBACc,IAAIT,KAAKrF,GAAM4F,qBAD7B,cAiBAG,CAAoBpB,KAKhC,6BACI,kBAAC,EAAD,CAASlD,KAAMA,EAAMI,QAASA,EAC1BQ,WA9HG,SAACnB,GAGhB,GAAa,KAATO,EAEA,OACIuE,MAAM,yBLyDO,SAACC,GAE1B,OAAOhI,MAAM,GAAD,OAAIC,WAAJ,OAAcwB,cAAc,CACpCtB,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUyH,KAEpBxH,MAAK,SAAAC,GACF,IAAKA,EAAWC,GACZ,MAAM,IAAIC,MAAM,gBAGpB,OAAOF,EAAWG,UAErBC,OAAM,SAAAC,GACHC,QAAQC,IAAIF,OK7DhBmH,CARc,CACVP,KAAM,IAAIN,KACV5D,KAAMA,EACNxB,YAAY,EACZZ,OAAQxB,EAAKsB,MAKhBV,MAAK,SAAA6C,GACFC,OAIJM,EAAQ,KAsGIN,QAASA,EACTkB,OAAQA,EAAQb,UAAWA,EAC3BkB,YArGI,WAEhBlB,GAAU,GAEK,KAAXiD,EAGAtF,EAAWsF,EAAQpD,GACdhD,MAAK,SAAA6C,GAGFC,IACAM,EAAQ,OAEX/C,OAAM,SAAAC,GACHC,QAAQC,IAAIF,MAGpBiH,MAAM,mBAuFN,4BAAQ3E,QAAS,WAAQ+B,OAAOC,aAAa8C,WAAW,SAAU5C,EAAS,MAA3E,UACA,6BAAK,6BACL,6BAEQC,EACI,4BAAQnC,QAAS,WAAQxB,EAAMoF,QAAQC,KAAK,kBAA5C,cACC,O,sBC/EVkB,MA/Gf,SAAgBvG,GAAO,MAEOE,mBAAS,IAFhB,mBAEZsG,EAFY,KAELC,EAFK,OAGavG,mBAAS,IAHtB,mBAGZwG,EAHY,KAGFC,EAHE,OAMe1B,qBAAW/B,GAArCI,EANW,EAMXA,YAAaI,EANF,EAMEA,SAEfrB,EAAkB,SAAChB,GAIrB,OAFWA,EAAMC,OAAOsF,MAGpB,IAAK,QACDH,EAASpF,EAAMC,OAAOgB,OACtB,MAEJ,IAAK,WACDqE,EAAYtF,EAAMC,OAAOgB,SAmErC,OArBAgD,qBAAU,SAACuB,IAEPA,EAASC,IAAYC,SAASxD,OAAOyD,SAASC,OAEnCC,MAAMjJ,QAEbqF,GAAY,GACZI,EAASmD,EAAOK,MAAMjJ,OACtBsF,OAAOC,aAAa2D,QAAQ,QAASN,EAAOK,MAAMjJ,OAClD+B,EAAMoF,QAAQC,KAAK,WAGvB,IAAI+B,EAAa7D,OAAOC,aAAaC,QAAQ,SAE1B,KAAf2D,IACA9D,GAAY,GACZI,EAAS0D,MAGd,IAGC,sCAEI,2BAAOrE,KAAK,QAAQ6D,KAAK,QAAQxF,SAAUiB,EAAiBC,MAAOkE,IAAe,6BAFtF,YAII,2BAAOzD,KAAK,WAAW6D,KAAK,WAAWxF,SAAUiB,EAAiBC,MAAOoE,IAAkB,6BAC3F,4BAAQlF,QAhEO,WAEnB,IAAI/C,EAAO,CAAE+H,QAAOE,YAKpBtI,MAAM,GAAD,OAAIC,WAAJ,OAAcC,UAAd,UAA+B,CAChCC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUF,KAEpBG,MAAK,SAAAC,GACF,IAAKA,EAAWC,GACZ,MAAM,IAAIC,MAAM,sBAEpB,OAAOF,EAAWG,UAErBJ,MAAK,SAAA6C,GAGmB,KAAjBA,EAAOxD,QAEPqF,GAAY,GACZI,EAASjC,EAAOxD,OAChBsF,OAAOC,aAAa2D,QAAQ,QAAS1F,EAAOxD,QAEhD+B,EAAMoF,QAAQC,KAAK,aAEtBpG,OAAM,SAAAC,GACHC,QAAQD,MAAMA,EAAM0H,KAAM1H,EAAMmI,cAgCpC,UAAgD,6BAAM,6BAEtD,uBAAGJ,KAAI,UAAK5I,WAAL,OAAeC,UAAf,uBACH,yBAAKgJ,IAAG,UAAKjJ,UAAL,yBAAqCkJ,IAAI,eAAe5E,OAAO,KAAKG,MAAM,SAEtF,6BAAM,6BACN,uBAAGmE,KAAI,UAAK5I,WAAL,OAAeC,UAAf,yBACH,yBAAKgJ,IAAG,UAAKjJ,UAAL,2BAAuCkJ,IAAI,iBAAiB5E,OAAO,KAAKG,MAAM,SAClF,6BAAM,6BAEd,kBAAC,IAAD,CAAO0E,GAAG,UAAV,YAAmC,6BAAM,6BAAM,6BAE/C,uBAAGP,KAAI,8CAAP,QACA,6BAEA,uBAAGA,KAAK,6EAAR,oB,SC9GG,SAASQ,EAAT,GAA2D,IAAtBC,EAAqB,EAAhCC,UAAyBC,EAAO,6BAErE,OACI,kBAAC7D,EAAD,MAEQ,gBAAE9F,EAAF,EAAEA,MAAF,OAEI,kBAAC,IAAD,eACI4J,OAAS,SAAA7H,GAAK,MAEA,KAAV/B,EAAe,kBAACyJ,EAAc1H,GAAY,kBAAC,IAAD,CAAUwH,GAAG,QAEvDI,OCNbE,MARf,SAAc9H,GACV,OACI,mD,yBCkQO+H,EA5PI,SAAC/H,GAAU,MAGAE,mBAAS,IAHT,mBAGnB8H,EAHmB,KAGZC,EAHY,OAIA/H,mBAAS,IAJT,mBAInB4E,EAJmB,KAIZC,EAJY,OAKQ7E,mBAAS,IALjB,mBAKnBuF,EALmB,KAKRyC,EALQ,OAMMhI,mBAAS,IANf,mBAMnBwF,EANmB,KAMTyC,EANS,OAOAjI,mBAAS,IAPT,mBAOnBsG,EAPmB,KAOZC,EAPY,OAQMvG,mBAAS,IARf,mBAQnBwG,EARmB,KAQTC,EARS,OASAzG,oBAAS,GATT,mBASnByD,EATmB,KASZC,EATY,OAUE3D,IAAMC,UAAS,GAVjB,mBAUnB0C,EAVmB,KAUXb,EAVW,OAWE9B,IAAMC,SAAS,IAXjB,mBAWnB8E,EAXmB,KAWX/C,EAXW,OAeEhC,IAAMgF,WAAW/B,GAArCQ,EAfkB,EAelBA,SAAUzF,EAfQ,EAeRA,MAEZmK,GAAiB,WACnBF,EAAa,IACbC,EAAY,IACZ1B,EAAS,IACTE,EAAY,IACZ/C,GAAS,GACT7B,GAAU,GACVE,EAAU,KAORI,GAAkB,SAAChB,GAErB,IAAIuF,EAAOvF,EAAMC,OAAOsF,KACpBtE,EAAQjB,EAAMC,OAAOgB,MAEzB,OAAQsE,GACJ,IAAK,YACDsB,EAAa5F,GACb,MACJ,IAAK,WACD6F,EAAY7F,GACZ,MACJ,IAAK,QACDmE,EAASnE,GACT,MACJ,IAAK,WACDqE,EAAYrE,KAQlBE,GAAU,uCAAG,4BAAA6F,EAAA,6DAEXC,EAAU,CACV7C,YACAC,WACAc,QACAE,WACA/C,SAPW,SAUT5F,EAAcuK,EAASrK,GAVd,OAYfmK,KACA1G,KAbe,2CAAH,qDAgBVuB,GAAW,uCAAG,WAAO5B,GAAP,eAAAgH,EAAA,6DAEZ5I,EAAc,CACdgG,YACAC,WACAc,QACAE,WACA/C,SAPY,SAUVpE,EAAWyF,EAAQvF,EAAaxB,GAVtB,OAYhBmK,KACA1G,KAbgB,2CAAH,sDAgBX6G,GAAkB,SAAClH,GAErB,IAAI4E,EAAQ5E,EAAMC,OAAOsF,KAErB5I,EAAOgK,EAAM/B,GAEjBiC,EAAalK,EAAKyH,WAClB0C,EAAYnK,EAAK0H,UACjBe,EAASzI,EAAKwI,OACd5C,EAAS5F,EAAK2F,OACdgD,EAAY3I,EAAK0I,UAEjB3E,GAAU,GACVE,EAAUjE,EAAKsB,MAIbkJ,GAAiB,uCAAG,WAAOnH,GAAP,iBAAAgH,EAAA,6DAElBpC,EAAQ5E,EAAMC,OAAOsF,KAErB5I,EAAOgK,EAAM/B,GAJK,SAMhB5G,EAAWrB,EAAMC,GAND,OAQtBmK,KACA1G,KATsB,2CAAH,sDAYjB+G,GAAgB,SAACpH,GAEnBlC,QAAQC,IAAIiC,EAAMC,OAAOgB,OAGzBxC,EAAWuB,EAAMC,OAAOgB,OACvB1D,MAAK,SAAAwD,GAEHV,QAEFzC,OAAM,SAAAC,GACHC,QAAQC,IAAIF,OAIdwC,GAAU,WAEZuC,EAAYhG,EAAOiH,WAClBtG,MAAK,SAAA4F,GAECA,EAAQxG,KAAK2F,OTrHD,SAAC1F,GAExB,OAAOG,MAAM,GAAD,OAAIC,WAAJ,OAAcC,WAAW,CACjCC,OAAQ,MACRC,QAAS,CACL,cAAgB,UAAhB,OAA2BP,GAC3B,eAAgB,sBAGvBW,MAAK,SAAAC,GACF,IAAIA,EAAWC,GACX,MAAM,IAAIC,MAAM,gBAGpB,OAAOF,EAAWG,UAErBC,OAAM,SAAAC,GACHC,QAAQC,IAAIF,MSqGJwJ,CAAYzK,GACXW,MAAK,SAAAoJ,GAEFC,EAASD,MTpGF,SAAC/J,GAExB,OAAOG,MAAM,GAAD,OAAIC,WAAJ,OAAcwB,cAAc,CACpCtB,OAAQ,MACRC,QAAS,CACL,cAAgB,UAAhB,OAA2BP,GAC3B,eAAgB,sBAGvBW,MAAK,SAAAC,GACF,IAAIA,EAAWC,GACX,MAAM,IAAIC,MAAM,gBAGpB,OAAOF,EAAWG,UAErBJ,MAAK,SAAA6C,GAGF,OAFAtC,QAAQC,IAAI,YAAaqC,GAElBA,KAEVxC,OAAM,SAAAC,GACHC,QAAQC,IAAIF,MSiFJyJ,CAAY1K,GACXW,MAAK,SAAAkG,GAEFC,EAASD,GAAS,QAGtB9E,EAAMoF,QAAQC,KAAK,QAG1BpG,OAAM,SAAAC,GACHC,QAAQC,IAAIF,GACZc,EAAMoF,QAAQC,KAAK,SAI3BC,qBAAW,WAEP5D,OACD,IAgBH,OACI,mDACuB,6BACnB,2CAEQ,2BAAOqB,KAAK,OAAO6D,KAAK,YAAYxF,SAAUiB,GAAiBC,MAAOmD,IAAmB,6BAFjG,aAIQ,2BAAO1C,KAAK,OAAO6D,KAAK,WAAWxF,SAAUiB,GAAiBC,MAAOoD,IAAkB,6BAJ/F,SAMQ,2BAAO3C,KAAK,QAAQ6D,KAAK,QAAQxF,SAAUiB,GAAiBC,MAAOkE,IAAe,6BAN1F,YAQQ,2BAAOzD,KAAK,WAAW6D,KAAK,WAAWxF,SAAUiB,GAAiBC,MAAOoE,IAAkB,6BAE3F,kBAAC,IAAD,CAAUjG,QAASkD,EAAOvC,SAnKnB,WACnBwC,GAAUD,IAkKsDrB,MAAOqB,IAVnE,UAU4F,6BAzB5Ff,EAMI,4BAAQpB,QAASyB,IAAjB,QAJA,4BAAQzB,QAASgB,IAAjB,YA2BJ,6BACI,6BAAK,6BACT,4BAAQhB,QAAS,WAAQ+B,OAAOC,aAAa8C,WAAW,SAAU5C,EAAS,MAA3E,UACA,kBAAC,IAAD,CAAO8D,GAAG,UAAV,SACA,4BAAQhG,QAASE,IAAjB,WACA,4BAAQF,QAAS4G,IAAjB,eAGA,yBAAK7H,MAAO,CAACqI,MAAO,OAAQjH,UAAW,SACnC,sCACA,4BAEQqG,EAAMhC,KAAK,SAAC1D,EAAO2D,GAEf,OACI,wBAAI/B,IAAK5B,EAAMhD,KAAf,UACQgD,EAAMhD,IADd,eACwBgD,EAAMkE,MAD9B,eAC0ClE,EAAMqB,MAAQ,QAAU,YADlE,OAEI,4BAAQnC,QAASgH,GAAmB5B,KAAMX,GAA1C,UACA,4BAAQzE,QAAS+G,GAAiB3B,KAAMX,GAAxC,aAOpB,oDACA,4BAEQnB,EAAM+D,QAAO,SAAC1I,GACV,IAAI2I,GAAY,EAShB,GAPAd,EAAMe,SAAQ,SAAC/K,GAERmC,EAAKX,SAAWxB,EAAKsB,MACpBwJ,GAAY,OAIhBA,EACA,OAAO3I,KAEZ6F,KAAK,SAAC1D,EAAO2D,GAEZ,OACI,wBAAI/B,IAAK+B,GAAT,UACQ3D,EAAMV,KADd,eACyBU,EAAM9C,QAC3B,4BAAQgC,QAASiH,GAAenG,MAAOA,EAAMhD,KAA7C,kBCtPrB,SAAS0J,EAAMhJ,GAG1B,OACI,yBAAKO,MAAO,CAAEkC,gBAAiB,YAAaC,QAAS,SACjD,6CCoBGuG,MAnBf,SAAoBjJ,GAChB,OACI,6BACI,kBAAC,IAAD,KACI,kBAAC,EAAD,KACI,kBAACgJ,EAAD,MACA,kBAAC,IAAD,KACI,kBAACvB,EAAD,CAAgByB,KAAK,aAAavB,UAAWG,IAC7C,kBAACL,EAAD,CAAgByB,KAAK,SAASvB,UAAW/C,IACzC,kBAAC6C,EAAD,CAAgByB,KAAK,eAAevB,UAAWI,IAC/C,kBAAC,IAAD,CAAOmB,KAAK,IAAIvB,UAAWpB,SCRpC4C,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCKcC,QACW,cAA7B9F,OAAOyD,SAASsC,UAEe,UAA7B/F,OAAOyD,SAASsC,UAEhB/F,OAAOyD,SAASsC,SAASC,MACvB,2DCZNC,IAAS3B,OAAO,kBAAC,EAAD,MAAS4B,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjL,MAAK,SAAAkL,GACJA,EAAaC,gBAEd9K,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMmI,a,kBExI5B,IAGM2C,EAAa,CACf,CACIlE,MAAO,IAAIN,MAAQO,qBACnBnE,KAAM,gBACNxB,YAAY,GAEhB,CACI0F,MAAO,IAAIN,MAAQO,qBACnBnE,KAAM,wCACNxB,YAAY,IAiBpB6J,EAAOC,QAAQ7L,QALX,GAMJ4L,EAAOC,QAAQrK,WA9BI,SA+BnBoK,EAAOC,QAAQ5L,QA9BC,SA+BhB2L,EAAOC,QAAQhF,QA9BC,SA+BhB+E,EAAOC,QAAQF,WAAaA,I","file":"static/js/main.47274901.chunk.js","sourcesContent":["import { uriBase, currentApi, userApi } from './const'\n\n/*\nThis file contains all the fetch requests used in our react app\n*/\n\n// GET all the tasks by user id\nexport const getTasksByUserId = (user) => {\n\n    return fetch(`${uriBase}${currentApi}/${user._id}`, {\n        method: 'GET',\n        headers: {\n            \"Content-Type\": \"application/json\",\n        }\n    })\n        .then(httpResult => {\n            if (!httpResult.ok) {\n                throw new Error(\"Bad response\")\n            }\n\n            return httpResult.json()\n        })\n        .catch(error => {\n\n            console.log(error)\n        })\n}\n\n// GET all users\nexport const getAllUsers = (token) => {\n\n    return fetch(`${uriBase}${userApi}`, {\n        method: 'GET',\n        headers: {\n            \"Authorization\": `Bearer ${token}`,\n            \"Content-Type\": \"application/json\"\n        }\n    })\n    .then(httpResult => {\n        if(!httpResult.ok){\n            throw new Error(\"Bad response\")\n        }\n\n        return httpResult.json()\n    })\n    .catch(error => {\n        console.log(error)\n    })\n}\n\nexport const getAllTasks = (token) => {\n\n    return fetch(`${uriBase}${currentApi}`, {\n        method: 'GET',\n        headers: {\n            \"Authorization\": `Bearer ${token}`,\n            \"Content-Type\": \"application/json\"\n        }\n    })\n    .then(httpResult => {\n        if(!httpResult.ok){\n            throw new Error(\"Bad response\")\n        }\n        \n        return httpResult.json()\n    })\n    .then(result => {\n        console.log(\"get tasks\", result)\n\n        return result\n    })\n    .catch(error => {\n        console.log(error)\n    })\n}\n\n// POST - create new user\nexport const createNewUser = (user, token) => {\n\n    let createObj = {}\n    createObj.doc = user\n\n    return fetch(`${uriBase}${userApi}/create`,{ \n        method: \"POST\",\n        headers: {\n            \"Authorization\": `Bearer ${token}`,\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(createObj)\n    })\n    .then(httpResult => {\n        if(!httpResult.ok){\n            throw new Error(\"CreateNewUser Failed\")\n        }\n\n        return httpResult.json()\n    })\n    .catch(error => {\n        console.log(error)\n    })\n}\n\n// delete user\nexport const deleteUser = (user, token) => {\n\n    return fetch(`${uriBase}${userApi}/delete/${user._id}`,{\n        method: \"DELETE\",\n        headers: {\n            \"Authorization\": `Bearer ${token}`,\n            \"Content-Type\": \"application/json\"\n        }\n    })\n    .then(httpResult => {\n        if (!httpResult.ok) {\n            throw new Error(\"Bad response\")\n        }\n\n        return httpResult.json()\n    })\n}\n\n// POST - Create new task given a task object\nexport const createNewTask = (newTask) => {\n\n    return fetch(`${uriBase}${currentApi}`, {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(newTask)\n    })\n        .then(httpResult => {\n            if (!httpResult.ok) {\n                throw new Error(\"Bad response\")\n            }\n\n            return httpResult.json()\n        })\n        .catch(error => {\n            console.log(error)\n        })\n}\n\n// PATCH - update user\nexport const updateUser = (userId,updatedUser, token) => {\n\n    return fetch(`${uriBase}${userApi}/update/${userId}`, {\n        method: \"PATCH\",\n        headers: {\n            \"Authorization\": `Bearer ${token}`,\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(updatedUser)\n\n    })\n    .then(httpResult => {\n        if(!httpResult.ok){\n            throw new Error(\"Could not update user\")\n        }\n\n        return httpResult.json()\n    })\n    .catch(error => {\n        console.log(error)\n    })\n}\n\n// PATCH - update task given task id and what to change\n// currently only the text and isComplete fields can be changed\nexport const updateTask = (taskId, change) => {\n\n    let body = {}\n\n    if(typeof change == typeof true){\n\n        body = {\"isComplete\": !change}\n    }\n    else if (typeof change == typeof ''){\n        \n        body = {\"text\": change}\n    }\n\n    return fetch(`${uriBase}${currentApi}/${taskId}`, {\n        method: \"PATCH\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(body)\n    })\n        .then(httpResult => {\n            if (!httpResult.ok) {\n                throw new Error(\"Could not update with edit\")\n            }\n\n            return httpResult\n        })\n        .catch(error => {\n            console.log(error)\n        })\n}\n\n// DELETE - delete a task given a task id\nexport const deleteTask = (taskId) => {\n\n    return fetch(`${uriBase}${currentApi}/${taskId}`, {\n        method: \"DELETE\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n        }\n    })\n    .then(httpResult => {\n        if (!httpResult.ok) {\n            throw new Error(\"Bad response\")\n        }\n\n        return httpResult.json()\n    })\n}\n\n","import React from 'react';\nimport {updateTask, deleteTask} from '../fetchUtils'\nimport Checkbox from '@material-ui/core/Checkbox';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport IconButton from '@material-ui/core/IconButton';\nimport EditIcon from '@material-ui/icons/Edit'\nimport Grid from '@material-ui/core/Grid'\n\nexport default function Task(props) {\n    const [isComplete, setIsComplete] = React.useState(props.task.isComplete)\n    const [style, setStyle] = React.useState(isComplete ? {textDecorationLine: 'line-through'} : {} )\n    const [checked, setChecked] = React.useState(isComplete);\n\n    const updateLook = () => {\n\n        if(!isComplete){\n            setStyle({textDecorationLine: 'line-through'}) \n            setIsComplete(true)\n            setChecked(true)\n        } else {\n            setStyle({textDecorationLine: 'none'})\n            setIsComplete(false)\n            setChecked(false)\n        }\n\n    }\n\n    const onClickComplete = () => {\n\n        // update task with id and new isComplete\n        updateTask(props.task._id, isComplete)\n        .then(result => {\n\n            // update state and refresh\n            setIsComplete(result.isComplete)\n            props.refresh()\n            updateLook()\n        })\n        .catch(error => {\n            console.log(error)\n        })\n    }\n\n    const onClickDelete = () => {\n\n        let removeTask = props.task\n\n        // remove task from the db and rerender\n        deleteTask(removeTask._id)\n        .then(response => {\n\n           props.refresh()\n        })\n        .then( result => {\n            updateLook()\n        }\n        )\n        .catch(error => {\n            console.log(error)\n        })\n    }\n\n    const onClickEdit = () => {\n        props.setIsEdit(true)\n        props.setText(props.task.text)\n        props.setEditId(props.task._id)\n    }\n\n\n    return(\n        <div>\n        <div  >\n            <Grid container spacing={0} justify=\"center\" alignItems=\"baseline\">\n                <Grid item xs></Grid>\n                <Grid item xs>\n            <Checkbox\n                checked={checked}\n                onChange={(event) => setChecked(event.target.checked)}\n                color=\"primary\"\n                onClick={onClickComplete}\n            />\n            </Grid>\n            <Grid item xs>\n                <div style={{textAlign: 'center'}}>\n                <div style={style}>\n                    {`${props.task.text}`}\n                </div>\n                </div>\n            </Grid>\n            <Grid item xs>\n            <IconButton aria-label=\"edit\" onClick={onClickEdit}>\n                <EditIcon fontSize='small'></EditIcon>\n            </IconButton>\n\n            <IconButton aria-label=\"delete\" onClick={onClickDelete}>\n            <DeleteIcon fontSize=\"small\" />\n            </IconButton>\n            </Grid>\n            <Grid item xs></Grid>\n            </Grid>\n            \n        </div>\n        </div>\n    )\n}","import React from 'react';\n\nexport default function Task(props) {\n\n    const onChangeHandler = (event) => {\n\n        props.setText(event.target.value)\n\n        if(event.keyCode === 13){\n            props.onClickAdd(event)\n        }\n    }\n\n    const createButton = () => {\n\n        if(!props.isEdit){\n            return (\n                <button onClick={props.onClickAdd}>Add</button>\n            )\n        } else {\n            return (\n                <button onClick={props.onClickEdit}>Edit</button>\n            )\n        }\n\n    }\n\n    return(\n        <div style={{backgroundColor: \"lightblue\", padding: '10px', height: '50px'}}>\n            {props.isEdit ? \"Edit Task:\": \"New Task:\"}\n         <input style={{margin: '5px', height: '50%', width: '35%', fontSize: '16px'}}\n          type='text' onChange={onChangeHandler} value={props.text} onKeyUp={onChangeHandler}>\n          </input>\n            {createButton()}\n        </div>\n    )\n}","import React from 'react';\n\nconst AuthContext = React.createContext({})\n\nconst AuthProvider = (props) => {\n\n    const [loggedIn, setLoggedIn] = React.useState(false)\n    const [token, setToken] = React.useState(window.localStorage.getItem('token'))\n    const [admin, setAdmin] = React.useState(false)\n\n    // const writeToken = (token) => {\n\n    //     setToken(token)\n    // }\n\n    return (\n        <div>\n            <AuthContext.Provider value ={{loggedIn, setLoggedIn, token, setToken, admin, setAdmin}}>\n                {props.children}\n            </AuthContext.Provider>\n        </div>\n    );\n};\n\nconst AuthConsumer = AuthContext.Consumer\nexport {AuthProvider, AuthConsumer, AuthContext}","import jwt from 'jsonwebtoken'\n\nexport function verifyToken(token, key) {\n\n    return new Promise((resolve, reject) => {\n\n        jwt.verify(token, key, (error, payload) => {\n\n            if (error !== null) {\n                reject(error)\n            } else {\n                resolve(payload)\n            }\n        })\n    })\n}","import React from 'react';\nimport Task from './Task'\nimport AddTask from './AddTask'\nimport {  JWT_KEY } from '../const'\nimport { AuthContext } from './AuthContext'\nimport { verifyToken } from '../jwtUtils'\nimport { getTasksByUserId , createNewTask, updateTask} from '../fetchUtils'\n\n//const ls = require('local-storage')\n\n\nconst listStyle = {\n\n    listStyleType: 'none',\n}\n\nconst dateStyle = {\n\n    listStyleType: 'none',\n    backgroundColor: 'lightBlue'\n}\n\nexport default function ListOfTasks(props) {\n    const [user, setUser] = React.useState('')\n    const [tasks, setTasks] = React.useState([])\n    const [text, setText] = React.useState('')\n    const [isEdit, setIsEdit] = React.useState(false)\n    const [editId, setEditId] = React.useState('')\n\n    const { admin, setAdmin, setToken } = React.useContext(AuthContext)\n\n    const refresh = () => {\n\n        // Verify Token\n        verifyToken(window.localStorage.getItem(\"token\"), JWT_KEY)\n            .then(payload => {\n\n                return payload.user\n            })\n            .then(user => {\n\n                // set user\n                setUser(user)\n                setAdmin(user.admin)\n\n                // get tasks by user id\n                getTasksByUserId(user)\n                .then(tasks => {\n                    setTasks(tasks)\n                })\n\n            }) // end of verify token\n            .catch(error => {\n\n                console.log(error)\n                props.history.push('/')\n            })\n    }\n\n    const onClickAdd = (event) => {\n\n        // check to see if the task is empty\n        if (text === '') {\n\n            return (\n                alert(\"Task cannot be empty\")\n            )\n        }\n\n        // construct the new task object\n        let newTask = {\n            date: new Date(),\n            text: text,\n            isComplete: false,\n            userId: user._id\n        }\n\n        // add the object to the database and refresh\n        createNewTask(newTask)\n        .then(result => {\n            refresh()\n        })\n\n        //clear text field\n        setText('')\n    }\n\n    const onClickEdit = () => {\n\n        setIsEdit(false)\n\n        if (editId !== '') {\n\n            // update task in db\n            updateTask(editId, text)\n                .then(result => {\n\n                    // update the view\n                    refresh()\n                    setText('')\n                })\n                .catch(error => {\n                    console.log(error)\n                })\n        } else {\n            alert(\"Cannot Edit\")\n        }\n    }\n\n    React.useEffect(() => {\n\n        refresh()\n    }, [])\n\n    const tasksToDisplayArray = (tasks) => {\n        // here we reduce our tasks array, pulling out unique dates\n        // and making them their own items in the display array\n        // later with our map we will return the date\n        // as its own li\n\n        return tasks.reduce((displayArr, currentTask) => {\n\n            // if the date is not\n            if (new Date(currentTask.date).toLocaleDateString() !==\n                new Date(currentDate).toLocaleDateString()) {\n\n                // store the current date\n                currentDate = currentTask.date\n\n                // push the date and then push the task\n                displayArr.push(currentDate)\n                displayArr.push(currentTask)\n            } else {\n                // if the date is the same as the previous task\n                // then just push the task\n                displayArr.push(currentTask)\n            }\n\n            return displayArr\n\n        }, []) // end of reduce()\n        .map((task, index) => {\n            // This map function will translate our\n            // display array to li items\n\n            return (\n\n                // if the text exists then we know that the\n                // item is not just a date and we will display\n                // all the task information\n                task.text ? (\n                    <li style={listStyle} key={index}>\n                        <Task task={task}\n                            refresh={refresh}\n                            setIsEdit={setIsEdit}\n                            setText={setText}\n                            setEditId={setEditId}></Task>\n                    </li>\n                    // if the item has no text property then\n                    // we will just display the date.\n                ) : (\n                        <li style={dateStyle} key={index}>\n                            {`***** ${new Date(task).toLocaleDateString()} *****`}\n                        </li>\n                    )\n            )\n        }) // end of map()\n    } // end of tasksToDisplayArr()\n\n    let currentDate = new Date(0)\n\n    return (\n        <div>\n            <h4>{`${user.firstName} ${user.lastName}'s Tasks:`}</h4>\n\n            <div >\n                <ul style={{ padding: 0 }}>\n                    {\n                        tasksToDisplayArray(tasks)\n                    }\n                </ul>\n            </div>\n\n            <div>\n                <AddTask text={text} setText={setText}\n                    onClickAdd={onClickAdd}\n                    refresh={refresh}\n                    isEdit={isEdit} setIsEdit={setIsEdit}\n                    onClickEdit={onClickEdit} >\n                </AddTask>\n            </div>\n\n            <button onClick={() => { window.localStorage.removeItem(\"token\"); setToken('') }}>LOGOUT</button>\n            <br/><br/>\n            <div>\n                {\n                    admin ? (\n                        <button onClick={() => { props.history.push('/create-user')}}>Admin Page</button>\n                    ) : (null)\n                }\n            </div>\n            \n            \n        </div>\n    )\n}","import React, { useContext, useState, useEffect } from 'react';\nimport { AuthContext } from './AuthContext'\nimport { uriBase, userApi } from '../const'\nimport queryString from 'query-string'\nimport { Link as RLink } from 'react-router-dom'\n\n//const ls = require('local-storage')\n\nfunction SignIn(props) {\n    //State\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n\n    //Context\n    const { setLoggedIn, setToken } = useContext(AuthContext)\n\n    const onChangeHandler = (event) => {\n\n        let name = event.target.name\n\n        switch (name) {\n            case 'email':\n                setEmail(event.target.value)\n                break;\n\n            case 'password':\n                setPassword(event.target.value)\n                break\n            default:\n                break;\n        }\n\n    }\n\n    // email password sign in\n    const onClickHandler = () => {\n\n        let body = { email, password }\n\n        // Post the email and password to the api\n        // if an email is found and it matches the\n        // password, it will return a json web token\n        fetch(`${uriBase}${userApi}/login`, {\n            method: 'POST',\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(body)\n        })\n            .then(httpResult => {\n                if (!httpResult.ok) {\n                    throw new Error(\"Could not get user\")\n                }\n                return httpResult.json()\n            })\n            .then(result => {\n\n                // if a token was returned\n                if (result.token !== '') {\n\n                    setLoggedIn(true)\n                    setToken(result.token)\n                    window.localStorage.setItem(\"token\", result.token)\n                }\n                props.history.push('/tasks')\n            })\n            .catch(error => {\n                console.error(error.name, error.message)\n            })\n    }\n\n    // oauth sign in\n    useEffect((parsed) => {\n\n        parsed = queryString.parseUrl(window.location.href)\n\n        if (parsed.query.token) {\n\n            setLoggedIn(true)\n            setToken(parsed.query.token)\n            window.localStorage.setItem(\"token\", parsed.query.token)\n            props.history.push('/tasks')\n        }\n\n        let localToken = window.localStorage.getItem(\"token\")\n\n        if (localToken !== \"\") {\n            setLoggedIn(true)\n            setToken(localToken)\n        }\n\n    }, [])\n\n    return (\n        <div>\n            Email:\n            <input type='email' name=\"email\" onChange={onChangeHandler} value={email}></input><br />\n            Password:\n            <input type='password' name=\"password\" onChange={onChangeHandler} value={password}></input><br />\n            <button onClick={onClickHandler}>Log In</button><br /><br />\n\n            <a href={`${uriBase}${userApi}/auth/google/login`}>\n                <img src={`${uriBase}/img/google_login.png`} alt='Google Login' height='45' width='190'></img>\n            </a>\n            <br /><br />\n            <a href={`${uriBase}${userApi}/auth/facebook/login`}>\n                <img src={`${uriBase}/img/facebook_login.png`} alt='Facebook Login' height='45' width='190'></img>\n                </a><br /><br />\n\n            <RLink to='/tasks'>To Tasks</RLink><br /><br /><br />\n\n            <a href={`http://localhost:5001/img/google_login.png`}>html</a>\n            <br />\n\n            <a href=\"https://www.termsfeed.com/privacy-policy/8f4f66fa4c830b22fc9a54a9b3601b26\">Privacy Policy</a>\n        </div>\n    );\n}\n\nexport default SignIn;","import React from 'react'\nimport {Route, Redirect} from 'react-router-dom'\nimport {AuthConsumer} from './AuthContext'\n\nexport default function ProtectedRoute ({component: Component, ...rest}) {\n\n    return (\n        <AuthConsumer>\n            {\n                ({token}) => (\n\n                    <Route\n                        render ={props => \n\n                            token !== \"\" ? <Component {...props} /> : <Redirect to='/'/>\n                        }\n                        {...rest}\n                    />\n                )\n            }\n        </AuthConsumer>\n    )\n\n}","import React from 'react';\n\nfunction Test(props) {\n    return (\n        <div>\n            This is protected\n        </div>\n    );\n}\n\nexport default Test;","import React, { useState, useEffect } from 'react';\nimport { AuthContext } from './AuthContext'\nimport {getAllUsers, createNewUser, deleteUser, updateUser, getAllTasks, deleteTask} from '../fetchUtils'\nimport {Link as RLink} from 'react-router-dom'\nimport {verifyToken} from '../jwtUtils'\nimport {JWT_KEY} from '../const'\nimport Task from './Task'\n\nimport CheckBox from '@material-ui/core/Checkbox'\n\nconst CreateUser = (props) => {\n\n    // state\n    const [users, setUsers] = useState([])\n    const [tasks, setTasks] = useState([])\n    const [firstName, setFirstName] = useState('')\n    const [lastName, setLastName] = useState('')\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n    const [admin, setAdmin] = useState(false)\n    const [isEdit, setIsEdit] = React.useState(false)\n    const [editId, setEditId] = React.useState('')\n\n\n    // context\n    const { setToken, token } = React.useContext(AuthContext)\n\n    const clearUserState = () => {\n        setFirstName('')\n        setLastName('')\n        setEmail('')\n        setPassword('')\n        setAdmin(false)\n        setIsEdit(false)\n        setEditId('')\n    }\n\n    const changeCheckBox = () => {\n        setAdmin(!admin)\n    }\n\n    const onChangeHandler = (event) => {\n\n        let name = event.target.name\n        let value = event.target.value\n\n        switch (name) {\n            case 'firstName':\n                setFirstName(value)\n                break;\n            case 'lastName':\n                setLastName(value)\n                break\n            case 'email':\n                setEmail(value)\n                break\n            case 'password':\n                setPassword(value)\n                break\n            default:\n                break;\n        }\n\n    }\n\n    const onClickAdd = async () => {\n\n        let newUser = {\n            firstName,\n            lastName,\n            email,\n            password,\n            admin\n        }\n\n        await createNewUser(newUser, token)\n\n        clearUserState()\n        refresh()\n    }\n\n    const onClickEdit = async (event) => {\n\n        let updatedUser = {\n            firstName,\n            lastName,\n            email,\n            password,\n            admin\n        }\n\n        await updateUser(editId, updatedUser, token)\n\n        clearUserState()\n        refresh()\n    }\n\n    const onUserEditClick = (event) => {\n\n        let index = event.target.name\n\n        let user = users[index]\n\n        setFirstName(user.firstName)\n        setLastName(user.lastName)\n        setEmail(user.email)\n        setAdmin(user.admin)\n        setPassword(user.password)\n\n        setIsEdit(true)\n        setEditId(user._id)\n\n    }\n\n    const onUserDeleteClick = async (event) => {\n\n        let index = event.target.name\n\n        let user = users[index]\n\n        await deleteUser(user, token)\n\n        clearUserState()\n        refresh()\n    }\n\n    const onClickDelete = (event) => {\n\n        console.log(event.target.value)\n\n        // remove task from the db and rerender\n        deleteTask(event.target.value)\n        .then(response => {\n\n           refresh()\n        })\n        .catch(error => {\n            console.log(error)\n        })\n    }\n\n    const refresh = () => {\n\n        verifyToken(token, JWT_KEY)\n        .then(payload => {\n            \n            if(payload.user.admin){\n                getAllUsers(token)\n                .then(users => {\n                    \n                    setUsers(users)\n                })\n\n                getAllTasks(token)\n                .then(tasks => {\n\n                    setTasks(tasks || [])\n                })\n            } else{\n                props.history.push('/')\n            }\n        })\n        .catch(error => {\n            console.log(error)\n            props.history.push('/')\n        })\n    }\n\n    useEffect( () => {\n\n        refresh()\n    }, [])\n\n    const createButton = () => {\n\n        if(!isEdit){\n            return (\n                <button onClick={onClickAdd}>Add New</button>\n            )\n        } else {\n            return (\n                <button onClick={onClickEdit}>Edit</button>\n            )\n        }\n\n    }\n\n    return (\n        <div>\n            Create New Account <br/>\n            <div>\n                    First Name:\n                    <input type='text' name='firstName' onChange={onChangeHandler} value={firstName}></input><br />\n                    Last Name:\n                    <input type='text' name='lastName' onChange={onChangeHandler} value={lastName}></input><br />\n                    Email:\n                    <input type='email' name='email' onChange={onChangeHandler} value={email}></input><br/>\n                    Password:\n                    <input type='password' name='password' onChange={onChangeHandler} value={password}></input><br/>\n\n                    <CheckBox checked={admin} onChange={changeCheckBox} value={admin}></CheckBox> Admin <br/>\n                    {createButton()}        \n            </div>\n\n            <div>\n                <br/><br/>\n            <button onClick={() => { window.localStorage.removeItem(\"token\"); setToken('') }}>LOGOUT</button>\n            <RLink to='/tasks'>Tasks</RLink>\n            <button onClick={refresh}>Refresh</button>\n            <button onClick={clearUserState}>CLEAR FORM</button>\n            </div>\n\n            <div style={{float: 'left', textAlign: 'left'}}>\n                <h2>Users:</h2>\n                <ul>\n                    {\n                        users.map( (value, index) => {\n\n                            return(\n                                <li key={value._id}>\n                                    {`${value._id} || ${value.email} || ${value.admin ? \"Admin\" : \"Not admin\"} ||`}\n                                    <button onClick={onUserDeleteClick} name={index}>Delete</button>\n                                    <button onClick={onUserEditClick} name={index}>Edit</button>\n                                </li>\n                            )\n                            \n                        })\n                    }\n                </ul>\n                <h2>Tasks Without Users:</h2>\n                <ul>\n                    {\n                        tasks.filter((task) => {\n                            let foundTask = false\n\n                            users.forEach((user) => {\n\n                                if(task.userId === user._id){\n                                    foundTask = true\n                                }\n                            })\n\n                            if(!foundTask){\n                                return task\n                            }\n                        }).map( (value, index) => {\n\n                            return (\n                                <li key={index}>\n                                    {`${value.text} || ${value.userId}`}\n                                    <button onClick={onClickDelete} value={value._id}>DELETE</button>\n                                </li>\n                            )\n\n                        })\n                    }\n                </ul>\n            </div>\n        </div>\n    );\n};\n\nexport default CreateUser;\n","import React from 'react'\n\n\n\nexport default function Title(props) {\n\n\n    return (\n        <div style={{ backgroundColor: \"lightblue\", padding: '10px' }}>\n            <h1>Task Manager</h1>\n        </div>\n    )\n}\n","import React from 'react';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom'\nimport ListOfTasks from './ListOfTasks';\nimport SignIn from './SignIn';\nimport {AuthProvider} from './AuthContext'\nimport ProtectedRoute from './ProtectedRoute'\nimport Test from './Test'\nimport CreateUser from './CreateUser'\nimport Title from './Title'\n\nfunction MainRouter(props) {\n    return (\n        <div>\n            <Router>\n                <AuthProvider>\n                    <Title></Title>\n                    <Switch>\n                        <ProtectedRoute path='/protected' component={Test} />\n                        <ProtectedRoute path='/tasks' component={ListOfTasks} />\n                        <ProtectedRoute path='/create-user' component={CreateUser} />\n                        <Route path='/' component={SignIn} />\n                    </Switch>\n                </AuthProvider>\n            </Router>\n            \n        </div>\n    );\n}\n\nexport default MainRouter;","import React from 'react';\nimport './App.css';\nimport MainRouter from './components/MainRouter';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainRouter></MainRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","\nconst currentApi = \"/tasks\"\nconst userApi = \"/users\"\nconst JWT_KEY = 'abc123'\nconst DUMMY_DATA = [\n    {\n        date: (new Date()).toLocaleDateString(),\n        text: \"My first task\",\n        isComplete: false\n    },\n    {\n        date: (new Date()).toLocaleDateString(),\n        text: \"My second task should start completed\",\n        isComplete: true\n    }\n\n]\n\n//const uriBase = \"http://localhost:5001\"\n//const uriBase = \"https://sn-todo.herokuapp.com\"\n\n// here we switch our uriBase according to the node environment\nconst uriBase = process.env.NODE_ENV !== 'production' ? (\n    \"http://localhost:5001\"\n) : (\n    \"\" // this is blank because heroku adds the base for us\n)\n\n\n\nmodule.exports.uriBase = uriBase\nmodule.exports.currentApi = currentApi\nmodule.exports.userApi = userApi\nmodule.exports.JWT_KEY = JWT_KEY\nmodule.exports.DUMMY_DATA = DUMMY_DATA"],"sourceRoot":""}