{"version":3,"sources":["fetchUtils.js","components/Task.js","components/AddTask.js","components/AuthContext.js","components/ListOfTasks.js","jwtUtils.js","components/SignIn.js","components/ProtectedRoute.js","components/Test.js","components/CreateUser.js","components/Title.js","components/MainRouter.js","App.js","serviceWorker.js","index.js","const.js"],"names":["createNewUser","user","token","console","log","createObj","doc","fetch","uriBase","userApi","method","headers","body","JSON","stringify","then","httpResult","ok","Error","json","catch","error","deleteUser","_id","updateUser","userId","updatedUser","updateTask","taskId","change","currentApi","Task","props","React","useState","task","isComplete","setIsComplete","textDecorationLine","style","setStyle","checked","setChecked","updateLook","Grid","container","spacing","justify","alignItems","item","xs","Checkbox","onChange","event","target","color","onClick","result","refresh","textAlign","text","IconButton","aria-label","setIsEdit","setText","setEditId","fontSize","removeTask","response","onChangeHandler","value","keyCode","onClickAdd","backgroundColor","padding","height","isEdit","margin","width","type","onKeyUp","onClickEdit","AuthContext","createContext","AuthProvider","loggedIn","setLoggedIn","setToken","admin","setAdmin","Provider","children","AuthConsumer","Consumer","listStyle","listStyleType","dateStyle","ListOfTasks","setUser","tasks","setTasks","editId","useContext","key","Promise","resolve","reject","jwt","verify","payload","verifyToken","JWT_KEY","getTasksByUserId","history","push","useEffect","currentDate","Date","firstName","lastName","reduce","displayArr","currentTask","date","toLocaleDateString","map","index","tasksToDisplayArray","alert","newTask","createNewTask","SignIn","email","setEmail","password","setPassword","name","parsed","queryString","parseUrl","window","location","href","query","message","ProtectedRoute","Component","component","rest","render","to","Test","CreateUser","users","setUsers","setFirstName","setLastName","setCheckbox","clearUserState","a","newUser","onUserEditClick","onUserDeleteClick","getAllUsers","float","Title","MainRouter","path","App","className","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","DUMMY_DATA","module","exports"],"mappings":"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","file":"static/js/main.3b8be32f.chunk.js","sourcesContent":["import { uriBase, currentApi, userApi } from './const'\n\n/*\nThis file contains all the fetch requests used in our react app\n*/\n\n// GET all the tasks by user id\nexport const getTasksByUserId = (user) => {\n\n    return fetch(`${uriBase}${currentApi}/${user._id}`, {\n        method: 'GET',\n        headers: {\n            \"Content-Type\": \"application/json\",\n        }\n    })\n        .then(httpResult => {\n            if (!httpResult.ok) {\n                throw new Error(\"Bad response\")\n            }\n\n            return httpResult.json()\n        })\n        .catch(error => {\n\n            console.log(error)\n        })\n}\n\n// GET all users\nexport const getAllUsers = (token) => {\n\n    console.log(\"getAllUsers\", token)\n\n    return fetch(`${uriBase}${userApi}`, {\n        method: 'GET',\n        headers: {\n            \"Authorization\": `Bearer ${token}`,\n            \"Content-Type\": \"application/json\"\n        }\n    })\n    .then(httpResult => {\n        if(!httpResult.ok){\n            throw new Error(\"Bad response\")\n        }\n\n        return httpResult.json()\n    })\n    .catch(error => {\n        console.log(error)\n    })\n}\n\n// POST - create new user\nexport const createNewUser = (user, token) => {\n    \n    console.log(\"Create new User\", user)\n\n    let createObj = {}\n    createObj.doc = user\n\n    return fetch(`${uriBase}${userApi}/create`,{ \n        method: \"POST\",\n        headers: {\n            \"Authorization\": `Bearer ${token}`,\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(createObj)\n    })\n    .then(httpResult => {\n        if(!httpResult.ok){\n            throw new Error(\"CreateNewUser Failed\")\n        }\n\n        console.log(\"createNewUser\", httpResult.json())\n        return httpResult.json()\n    })\n    .catch(error => {\n        console.log(error)\n    })\n}\n\n// delete user\nexport const deleteUser = (user, token) => {\n\n    console.log(\"deleteUser user._id\", user._id)\n\n\n    return fetch(`${uriBase}${userApi}/delete/${user._id}`,{\n        method: \"DELETE\",\n        headers: {\n            \"Authorization\": `Bearer ${token}`,\n            \"Content-Type\": \"application/json\"\n        }\n    })\n    .then(httpResult => {\n        if (!httpResult.ok) {\n            throw new Error(\"Bad response\")\n        }\n\n        return httpResult.json()\n    })\n}\n\n// POST - Create new task given a task object\nexport const createNewTask = (newTask) => {\n\n    console.log(\"createNewTask\", newTask)\n\n    return fetch(`${uriBase}${currentApi}`, {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(newTask)\n    })\n        .then(httpResult => {\n            if (!httpResult.ok) {\n                throw new Error(\"Bad response\")\n            }\n\n            return httpResult.json()\n        })\n        .catch(error => {\n            console.log(error)\n        })\n}\n\n// PATCH - update user\nexport const updateUser = (userId,updatedUser, token) => {\n\n    console.log(\"updateUser user\", updatedUser)\n\n    return fetch(`${uriBase}${userApi}/update/${userId}`, {\n        method: \"PATCH\",\n        headers: {\n            \"Authorization\": `Bearer ${token}`,\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(updatedUser)\n\n    })\n    .then(httpResult => {\n        if(!httpResult.ok){\n            throw new Error(\"Could not update user\")\n        }\n\n        return httpResult.json()\n    })\n    .catch(error => {\n        console.log(error)\n    })\n}\n\n// PATCH - update task given task id and what to change\n// currently only the text and isComplete fields can be changed\nexport const updateTask = (taskId, change) => {\n\n    let body = {}\n\n    if(typeof change == typeof true){\n\n        body = {\"isComplete\": !change}\n    }\n    else if (typeof change == typeof ''){\n        \n        body = {\"text\": change}\n    }\n\n    return fetch(`${uriBase}${currentApi}/${taskId}`, {\n        method: \"PATCH\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(body)\n    })\n        .then(httpResult => {\n            if (!httpResult.ok) {\n                throw new Error(\"Could not update with edit\")\n            }\n\n            return httpResult\n        })\n        .catch(error => {\n            console.log(error)\n        })\n}\n\n// DELETE - delete a task given a task id\nexport const deleteTask = (taskId) => {\n\n    return fetch(`${uriBase}${currentApi}/${taskId}`, {\n        method: \"DELETE\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n        }\n    })\n    .then(httpResult => {\n        if (!httpResult.ok) {\n            throw new Error(\"Bad response\")\n        }\n\n        return httpResult.json()\n    })\n}\n\n\n\n\n\n\n\n\nexport const getUserByGoogleEmail = (googleEmail) => {\n\n}\n","import React from 'react';\nimport {updateTask, deleteTask} from '../fetchUtils'\nimport Checkbox from '@material-ui/core/Checkbox';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport IconButton from '@material-ui/core/IconButton';\nimport EditIcon from '@material-ui/icons/Edit'\nimport Grid from '@material-ui/core/Grid'\n\nexport default function Task(props) {\n    const [isComplete, setIsComplete] = React.useState(props.task.isComplete)\n    const [style, setStyle] = React.useState(isComplete ? {textDecorationLine: 'line-through'} : {} )\n    const [checked, setChecked] = React.useState(isComplete);\n\n    const updateLook = () => {\n\n        if(!isComplete){\n            setStyle({textDecorationLine: 'line-through'}) \n            setIsComplete(true)\n            setChecked(true)\n        } else {\n            setStyle({})\n            setIsComplete(false)\n            setChecked(false)\n        }\n\n    }\n\n    const onClickComplete = () => {\n\n        updateLook()\n\n        // update task with id and new isComplete\n        updateTask(props.task._id, isComplete)\n        .then(result => {\n\n            // update state and refresh\n            setIsComplete(result.isComplete)\n            props.refresh()\n        })\n        .catch(error => {\n            console.log(error)\n        })\n    }\n\n    const onClickDelete = () => {\n\n        let removeTask = props.task\n\n        // remove task from the db and rerender\n        deleteTask(removeTask._id)\n        .then(response => {\n\n           props.refresh()\n        })\n        .then( result => {\n            updateLook()\n        }\n        )\n        .catch(error => {\n            console.log(error)\n        })\n    }\n\n    const onClickEdit = () => {\n        props.setIsEdit(true)\n        props.setText(props.task.text)\n        props.setEditId(props.task._id)\n    }\n\n\n    return(\n        <div>\n        <div  >\n            <Grid container spacing={0} justify=\"center\" alignItems=\"baseline\">\n                <Grid item xs></Grid>\n                <Grid item xs>\n            <Checkbox\n                checked={checked}\n                onChange={(event) => setChecked(event.target.checked)}\n                color=\"primary\"\n                onClick={onClickComplete}\n            />\n            </Grid>\n            <Grid item xs>\n                <div style={{textAlign: 'center'}}>\n                <div style={style}>\n                    {`${props.task.text}`}\n                </div>\n                </div>\n            </Grid>\n            <Grid item xs>\n            <IconButton aria-label=\"edit\" onClick={onClickEdit}>\n                <EditIcon fontSize='small'></EditIcon>\n            </IconButton>\n\n            <IconButton aria-label=\"delete\" onClick={onClickDelete}>\n            <DeleteIcon fontSize=\"small\" />\n            </IconButton>\n            </Grid>\n            <Grid item xs></Grid>\n            </Grid>\n            \n        </div>\n        </div>\n    )\n}","import React from 'react';\n\nexport default function Task(props) {\n\n    const onChangeHandler = (event) => {\n\n        props.setText(event.target.value)\n\n        if(event.keyCode === 13){\n            props.onClickAdd(event)\n        }\n    }\n\n    const createButton = () => {\n\n        if(!props.isEdit){\n            return (\n                <button onClick={props.onClickAdd}>Add</button>\n            )\n        } else {\n            return (\n                <button onClick={props.onClickEdit}>Edit</button>\n            )\n        }\n\n    }\n\n    return(\n        <div style={{backgroundColor: \"lightblue\", padding: '10px', height: '50px'}}>\n            {props.isEdit ? \"Edit Task:\": \"New Task:\"}\n         <input style={{margin: '5px', height: '50%', width: '35%', fontSize: '16px'}}\n          type='text' onChange={onChangeHandler} value={props.text} onKeyUp={onChangeHandler}>\n          </input>\n            {createButton()}\n        </div>\n    )\n}","import React from 'react';\n\nconst AuthContext = React.createContext({})\n\nconst AuthProvider = (props) => {\n\n    const [loggedIn, setLoggedIn] = React.useState(false)\n    const [token, setToken] = React.useState('')\n    const [admin, setAdmin] = React.useState(false)\n\n    return (\n        <div>\n            <AuthContext.Provider value ={{loggedIn, setLoggedIn, token, setToken, admin, setAdmin}}>\n                {props.children}\n            </AuthContext.Provider>\n        </div>\n    );\n};\n\nconst AuthConsumer = AuthContext.Consumer\nexport {AuthProvider, AuthConsumer, AuthContext}","import React from 'react';\nimport Task from './Task'\nimport AddTask from './AddTask'\nimport {  JWT_KEY } from '../const'\nimport { AuthContext } from './AuthContext'\nimport { verifyToken } from '../jwtUtils'\nimport { getTasksByUserId , createNewTask, updateTask} from '../fetchUtils'\n\n\nconst listStyle = {\n\n    listStyleType: 'none',\n}\n\nconst dateStyle = {\n\n    listStyleType: 'none',\n    backgroundColor: 'lightBlue'\n}\n\nexport default function ListOfTasks(props) {\n    const [user, setUser] = React.useState('')\n    const [tasks, setTasks] = React.useState([])\n    const [text, setText] = React.useState('')\n    const [isEdit, setIsEdit] = React.useState(false)\n    const [editId, setEditId] = React.useState('')\n\n    const { setLoggedIn, token, admin, setAdmin } = React.useContext(AuthContext)\n\n    const refresh = () => {\n\n        // Verify Token\n        verifyToken(token, JWT_KEY)\n            .then(payload => {\n\n                return payload.user\n            })\n            .then(user => {\n\n                // set user\n                setUser(user)\n                setAdmin(user.admin)\n\n                // get tasks by user id\n                getTasksByUserId(user)\n                .then(tasks => {\n                    setTasks(tasks)\n                })\n\n            }) // end of verify token\n            .catch(error => {\n\n                console.log(error)\n                props.history.push('/')\n            })\n    }\n\n    const onClickAdd = (event) => {\n\n        // check to see if the task is empty\n        if (text === '') {\n\n            return (\n                alert(\"Task cannot be empty\")\n            )\n        }\n\n        // construct the new task object\n        let newTask = {\n            date: new Date(),\n            text: text,\n            isComplete: false,\n            userId: user._id\n        }\n\n        // add the object to the database and refresh\n        createNewTask(newTask)\n        .then(result => {\n            refresh()\n        })\n\n        //clear text field\n        setText('')\n    }\n\n    const onClickEdit = () => {\n\n        setIsEdit(false)\n\n        if (editId !== '') {\n\n            // update task in db\n            updateTask(editId, text)\n                .then(result => {\n\n                    // update the view\n                    refresh()\n                    setText('')\n                })\n                .catch(error => {\n                    console.log(error)\n                })\n        } else {\n            alert(\"Cannot Edit\")\n        }\n    }\n\n    React.useEffect(() => {\n\n        refresh()\n    }, [])\n\n    const tasksToDisplayArray = (tasks) => {\n        // here we reduce our tasks array, pulling out unique dates\n        // and making them their own items in the display array\n        // later with our map we will return the date\n        // as its own li\n\n        return tasks.reduce((displayArr, currentTask) => {\n\n            // if the date is not\n            if (new Date(currentTask.date).toLocaleDateString() !==\n                new Date(currentDate).toLocaleDateString()) {\n\n                // store the current date\n                currentDate = currentTask.date\n\n                // push the date and then push the task\n                displayArr.push(currentDate)\n                displayArr.push(currentTask)\n            } else {\n                // if the date is the same as the previous task\n                // then just push the task\n                displayArr.push(currentTask)\n            }\n\n            return displayArr\n\n        }, []) // end of reduce()\n        .map((task, index) => {\n            // This map function will translate our\n            // display array to li items\n\n            return (\n\n                // if the text exists then we know that the\n                // item is not just a date and we will display\n                // all the task information\n                task.text ? (\n                    <li style={listStyle} key={index}>\n                        <Task task={task}\n                            refresh={refresh}\n                            setIsEdit={setIsEdit}\n                            setText={setText}\n                            setEditId={setEditId}></Task>\n                    </li>\n                    // if the item has no text property then\n                    // we will just display the date.\n                ) : (\n                        <li style={dateStyle} key={index}>\n                            {`***** ${new Date(task).toLocaleDateString()} *****`}\n                        </li>\n                    )\n            )\n        }) // end of map()\n    } // end of tasksToDisplayArr()\n\n    let currentDate = new Date(0)\n\n    return (\n        <div>\n            <h4>{`${user.firstName} ${user.lastName}'s Tasks:`}</h4>\n\n            <div >\n                <ul style={{ padding: 0 }}>\n                    {\n                        tasksToDisplayArray(tasks)\n                    }\n                </ul>\n            </div>\n\n            <div>\n                <AddTask text={text} setText={setText}\n                    onClickAdd={onClickAdd}\n                    refresh={refresh}\n                    isEdit={isEdit} setIsEdit={setIsEdit}\n                    onClickEdit={onClickEdit} >\n                </AddTask>\n            </div>\n\n            <button onClick={() => { setLoggedIn(false) }}>LOGOUT</button>\n            <br/><br/>\n            <div>\n                {\n                    admin ? (\n                        <button onClick={() => { props.history.push('/create-user')}}>Admin Page</button>\n                    ) : (null)\n                }\n            </div>\n            \n            \n        </div>\n    )\n}","import jwt from 'jsonwebtoken'\n\nexport function verifyToken(token, key) {\n\n    return new Promise((resolve, reject) => {\n\n        jwt.verify(token, key, (error, payload) => {\n\n            if (error !== null) {\n                reject(error)\n            } else {\n                resolve(payload)\n            }\n        })\n    })\n}","import React, { useContext, useState, useEffect } from 'react';\nimport { AuthContext } from './AuthContext'\nimport { uriBase, userApi } from '../const'\nimport queryString from 'query-string'\n\nfunction SignIn(props) {\n    //State\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n\n    //Context\n    const {setLoggedIn, setToken, token } = useContext(AuthContext)\n\n    const onChangeHandler = (event) => {\n\n        let name = event.target.name\n\n        switch (name) {\n            case 'email':\n                setEmail(event.target.value)\n                break;\n\n            case 'password':\n                setPassword(event.target.value)\n                break\n            default:\n                break;\n        }\n\n    }\n\n    // email password sign in\n    const onClickHandler = () => {\n\n        let body = { email, password }\n\n        // Post the email and password to the api\n        // if an email is found and it matches the\n        // password, it will return a json web token\n        fetch(`${uriBase}${userApi}/login`, {\n            method: 'POST',\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(body)\n        })\n        .then(httpResult => {\n            if (!httpResult.ok) {\n                throw new Error(\"Could not get user\")\n            }\n            console.log(\"httpresult\")\n            return httpResult.json()\n        })\n        .then(result => {\n\n            // if a token was returned\n            if(result.token !== ''){\n                console.log(token)\n                setLoggedIn(true)\n                setToken(result.token)\n            } \n            props.history.push('/tasks')\n        })\n        .catch(error => {\n            console.error(error.name, error.message)\n        })\n    }\n\n    // oauth sign in\n    useEffect( (parsed) => {\n\n        parsed = queryString.parseUrl(window.location.href)\n\n        if (parsed.query.token){\n\n            console.log(\"useEffect\", parsed.query.token)\n            setLoggedIn(true)\n            setToken(parsed.query.token)\n            props.history.push('/tasks')\n        }\n    })\n\n    return (\n        <div>\n            Email:\n            <input type='email' name=\"email\" onChange={onChangeHandler} value={email}></input><br />\n            Password:\n            <input type='password' name=\"password\" onChange={onChangeHandler} value={password}></input><br />\n            <button onClick={onClickHandler}>Log In</button><br /><br/>\n            <a href={`${uriBase}${userApi}/auth/google/login`}>LOGIN WITH GOOGLE</a><br/><br/>\n            <a href={`${uriBase}${userApi}/auth/facebook/login`}>LOGIN WITH FACEBOOK</a>\n        </div>\n    );\n}\n\nexport default SignIn;","import React from 'react'\nimport {Route, Redirect} from 'react-router-dom'\nimport {AuthConsumer} from './AuthContext'\n\nexport default function ProtectedRoute ({component: Component, ...rest}) {\n\n    return (\n        <AuthConsumer>\n            {\n                ({loggedIn}) => (\n\n                    <Route\n                        render ={props => \n\n                            loggedIn ? <Component {...props} /> : <Redirect to='/'/>\n                        }\n                        {...rest}\n                    />\n                )\n            }\n        </AuthConsumer>\n    )\n\n}","import React from 'react';\n\nfunction Test(props) {\n    return (\n        <div>\n            This is protected\n        </div>\n    );\n}\n\nexport default Test;","import React, { useState, useEffect } from 'react';\nimport { AuthContext } from './AuthContext'\nimport {getAllUsers, createNewUser, deleteUser, updateUser} from '../fetchUtils'\nimport {Link as RLink} from 'react-router-dom'\n\nimport CheckBox from '@material-ui/core/Checkbox'\n\nconst CreateUser = (props) => {\n\n    // state\n    const [users, setUsers] = useState([])\n    const [firstName, setFirstName] = useState('')\n    const [lastName, setLastName] = useState('')\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n    const [checkbox, setCheckbox] = useState(false)\n    const [admin, setAdmin] = useState(false)\n    const [isEdit, setIsEdit] = React.useState(false)\n    const [editId, setEditId] = React.useState('')\n\n\n    // context\n    const { setLoggedIn, token } = React.useContext(AuthContext)\n\n    const clearUserState = () => {\n        setFirstName('')\n        setLastName('')\n        setEmail('')\n        setPassword('')\n        setCheckbox(false)\n        setAdmin(false)\n        setIsEdit(false)\n        setEditId('')\n    }\n\n    const changeCheckBox = () => {\n        setAdmin(!admin)\n    }\n\n    const onChangeHandler = (event) => {\n\n        let name = event.target.name\n        let value = event.target.value\n\n        switch (name) {\n            case 'firstName':\n                setFirstName(value)\n                break;\n            case 'lastName':\n                setLastName(value)\n                break\n            case 'email':\n                setEmail(value)\n                break\n            case 'password':\n                setPassword(value)\n                break\n            default:\n                break;\n        }\n\n    }\n\n    const onClickAdd = async () => {\n\n        let newUser = {\n            firstName,\n            lastName,\n            email,\n            password,\n            admin\n        }\n\n        await createNewUser(newUser, token)\n\n        clearUserState()\n        refresh()\n    }\n\n    const onClickEdit = async (event) => {\n\n        console.log(users)\n\n        let updatedUser = {\n            firstName,\n            lastName,\n            email,\n            password,\n            admin\n        }\n\n        console.log(editId, updatedUser)\n\n        await updateUser(editId, updatedUser, token)\n\n        clearUserState()\n        refresh()\n    }\n\n    const onUserEditClick = (event) => {\n\n        let index = event.target.name\n\n        let user = users[index]\n\n        //console.log(index, user)\n\n        setFirstName(user.firstName)\n        setLastName(user.lastName)\n        setEmail(user.email)\n        setAdmin(user.admin)\n        setPassword(user.password)\n\n        setIsEdit(true)\n        setEditId(user._id)\n\n    }\n\n    const onUserDeleteClick = async (event) => {\n\n        let index = event.target.name\n\n        let user = users[index]\n\n        await deleteUser(user, token)\n\n        clearUserState()\n        refresh()\n    }\n\n    const refresh = () => {\n\n\n        getAllUsers(token)\n        .then(users => {\n            \n            setUsers(users)\n        })\n    }\n\n    useEffect( () => {\n\n        refresh()\n    }, [])\n\n    const createButton = () => {\n\n        if(!isEdit){\n            return (\n                <button onClick={onClickAdd}>Add New</button>\n            )\n        } else {\n            return (\n                <button onClick={onClickEdit}>Edit</button>\n            )\n        }\n\n    }\n\n    const changeCheckbox = (event) => {\n        \n        setCheckbox(!checkbox)\n    }\n\n    return (\n        <div>\n            Create New Account <br/>\n            <div>\n                    First Name:\n                    <input type='text' name='firstName' onChange={onChangeHandler} value={firstName}></input><br />\n                    Last Name:\n                    <input type='text' name='lastName' onChange={onChangeHandler} value={lastName}></input><br />\n                    Email:\n                    <input type='email' name='email' onChange={onChangeHandler} value={email}></input><br/>\n                    Password:\n                    <input type='password' name='password' onChange={onChangeHandler} value={password}></input><br/>\n\n                    <CheckBox checked={admin} onChange={changeCheckBox} value={admin}></CheckBox> Admin <br/>\n                    {createButton()}        \n            </div>\n\n            <div>\n                <br/><br/>\n            <button onClick={() => { setLoggedIn(false) }}>LOGOUT</button><t></t>\n            <RLink to='/tasks'>Tasks</RLink>\n            <button onClick={refresh}>Refresh</button>\n            <button onClick={clearUserState}>CLEAR FORM</button>\n            </div>\n\n            <div style={{float: 'left', textAlign: 'left'}}>\n                <ul>\n                    {\n                        users.map( (value, index) => {\n\n                            return(\n                                <li key={index}>\n                                    {`${value.email} || ${value.admin ? \"Admin\" : \"Not admin\"} ||`}\n                                    <button onClick={onUserDeleteClick} name={index}>Delete</button>\n                                    <button onClick={onUserEditClick} name={index}>Edit</button>\n                                </li>\n                            )\n                            \n                        })\n                    }\n                </ul>\n            </div>\n        </div>\n    );\n};\n\nexport default CreateUser;\n","import React from 'react'\n\n\n\nexport default function Title(props) {\n\n\n    return (\n        <div style={{ backgroundColor: \"lightblue\", padding: '10px' }}>\n            <h1>Task Manager</h1>\n        </div>\n    )\n}\n","import React from 'react';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom'\nimport ListOfTasks from './ListOfTasks';\nimport SignIn from './SignIn';\nimport {AuthProvider} from './AuthContext'\nimport ProtectedRoute from './ProtectedRoute'\nimport Test from './Test'\nimport CreateUser from './CreateUser'\nimport Title from './Title'\n\nfunction MainRouter(props) {\n    return (\n        <div>\n            <Router>\n                <AuthProvider>\n                    <Title></Title>\n                    <Switch>\n                        <ProtectedRoute path='/protected' component={Test} />\n                        <ProtectedRoute path='/tasks' component={ListOfTasks} />\n                        <ProtectedRoute path='/create-user' component={CreateUser} />\n                        <Route path='/' component={SignIn} />\n                    </Switch>\n                </AuthProvider>\n            </Router>\n            \n        </div>\n    );\n}\n\nexport default MainRouter;","import React from 'react';\nimport './App.css';\nimport MainRouter from './components/MainRouter';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainRouter></MainRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","\nconst currentApi = \"/tasks\"\nconst userApi = \"/users\"\nconst JWT_KEY = 'abc123'\nconst DUMMY_DATA = [\n    {\n        date: (new Date()).toLocaleDateString(),\n        text: \"My first task\",\n        isComplete: false\n    },\n    {\n        date: (new Date()).toLocaleDateString(),\n        text: \"My second task should start completed\",\n        isComplete: true\n    }\n\n]\n\n//const uriBase = \"http://localhost:5001\"\n//const uriBase = \"https://sn-todo.herokuapp.com\"\n\n// here we switch our uriBase according to the node environment\nconst uriBase = process.env.NODE_ENV !== 'production' ? (\n    \"http://localhost:5001\"\n) : (\n    \"sn-todo.herokuapp.com\"\n)\n\n\n\nmodule.exports.uriBase = uriBase\nmodule.exports.currentApi = currentApi\nmodule.exports.userApi = userApi\nmodule.exports.JWT_KEY = JWT_KEY\nmodule.exports.DUMMY_DATA = DUMMY_DATA"],"sourceRoot":""}