{"version":3,"sources":["fetchUtils.js","components/AuthContext.js","jwtUtils.js","components/TasksContext.js","components/Task.js","components/AddTask.js","components/ListOfTasks.js","components/SignIn.js","components/ProtectedRoute.js","components/CreateUser.js","components/Title.js","components/SignUp.js","components/MainRouter.js","App.js","serviceWorker.js","index.js","const.js"],"names":["updateTask","taskId","change","body","fetch","uriBase","currentApi","method","headers","JSON","stringify","then","httpResult","ok","Error","json","catch","error","console","log","deleteTask","createNewUserNoToken","user","a","jwt","sign","email","JWT_KEY","token","createObj","doc","userApi","AuthContext","React","createContext","AuthProvider","props","useState","loggedIn","setLoggedIn","window","localStorage","getItem","setToken","admin","setAdmin","setUser","useEffect","key","Promise","resolve","reject","verify","payload","verifyToken","result","removeItem","Provider","value","children","AuthConsumer","Consumer","TasksContext","TasksProvider","tasks","setTasks","users","setUsers","allTasks","setAllTasks","useContext","obj","returnValue","prop","hasOwnProperty","isEmpty","_id","getTasksByUserId","getAllUsers","getAllTasks","Task","task","isComplete","setIsComplete","textDecorationLine","extDecorationLine","style","setStyle","checked","setChecked","updateLook","Grid","container","spacing","justify","alignItems","item","xs","Checkbox","onChange","event","target","color","onClick","response","n","updatedArr","element","complete","textAlign","text","IconButton","aria-label","setIsEdit","setText","setEditId","fontSize","removeTask","index","indexOf","splice","onChangeHandler","keyCode","onClickAdd","backgroundColor","padding","height","isEdit","margin","width","type","onKeyUp","onClickEdit","listStyle","listStyleType","dateStyle","ListOfTasks","editId","currentDate","Date","firstName","lastName","reduce","displayArr","currentTask","date","toLocaleDateString","push","map","tasksToDisplayArray","alert","newTask","createNewTask","userId","updatedArray","updatedTasks","history","SignIn","setEmail","password","setPassword","name","parsed","queryString","parseUrl","location","href","query","setItem","localToken","Button","message","component","RLink","to","src","alt","ProtectedRoute","Component","rest","render","CreateUser","setFirstName","setLastName","clearUserState","onUserEditClick","createNewUser","updatedUsers","updatedUser","updateUser","nModified","onUserDeleteClick","deleteUser","deletedCount","onClickDeleteTask","id","updateAllTasks","float","filter","lostTask","forEach","Title","SignUp","state","setState","newObj","Paper","elevation","TextField","required","label","variant","MainRouter","path","App","className","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","DUMMY_DATA","module","exports"],"mappings":"2ZAkFaA,EAAa,SAACC,EAAQC,GAE/B,IAAIC,EAAO,GAWX,cATUD,UAAiB,EAEvBC,EAAO,CAAC,YAAeD,GAED,iBAAVA,IAEZC,EAAO,CAAC,KAAQD,IAGbE,MAAM,GAAD,OAAIC,WAAJ,OAAcC,aAAd,YAA4BL,GAAU,CAC9CM,OAAQ,QACRC,QAAS,CACL,eAAgB,oBAEpBL,KAAMM,KAAKC,UAAUP,KAEpBQ,MAAK,SAAAC,GACF,IAAKA,EAAWC,GACZ,MAAM,IAAIC,MAAM,8BAGpB,OAAOF,EAAWG,UAErBC,OAAM,SAAAC,GACHC,QAAQC,IAAIF,OAKXG,EAAa,SAACnB,GAEvB,OAAOG,MAAM,GAAD,OAAIC,WAAJ,OAAcC,aAAd,YAA4BL,GAAU,CAC9CM,OAAQ,SACRC,QAAS,CACL,eAAgB,sBAGvBG,MAAK,SAAAC,GACF,IAAKA,EAAWC,GACZ,MAAM,IAAIC,MAAM,gBAGpB,OAAOF,EAAWG,WA0DbM,EAAoB,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEAGdC,IAAIC,KAAK,CAACC,MAAM,8BAA+BC,WAHjC,cAG5BC,EAH4B,QAK5BC,EAAY,IACNC,IAAMR,EANgB,kBAQzBlB,MAAM,GAAD,OAAIC,WAAJ,OAAc0B,WAAU,CAChCxB,OAAQ,OACRC,QAAS,CACL,cAAgB,UAAhB,OAA2BoB,GAC3B,eAAgB,oBAEpBzB,KAAMM,KAAKC,UAAUmB,KAExBlB,MAAK,SAAAC,GACF,IAAIA,EAAWC,GACX,MAAM,IAAIC,MAAM,wBAGpB,OAAOF,EAAWG,UAErBC,OAAM,SAAAC,GACHC,QAAQC,IAAIF,OAxBgB,2CAAH,sD,+DCtLjC,IAAMe,EAAcC,IAAMC,cAAc,IAElCC,EAAe,SAACC,GAAW,IAAD,EAEIH,IAAMI,UAAS,GAFnB,mBAErBC,EAFqB,KAEXC,EAFW,OAGFN,IAAMI,SAASG,OAAOC,aAAaC,QAAQ,UAHzC,mBAGrBd,EAHqB,KAGde,EAHc,OAIFV,IAAMI,UAAS,GAJb,mBAIrBO,EAJqB,KAIdC,EAJc,OAKJZ,IAAMI,SAAS,IALX,mBAKrBf,EALqB,KAKfwB,EALe,KAoC5B,OA3BAb,IAAMc,WAAU,WAGRnB,GChBL,SAAqBA,EAAOoB,GAE/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAEzB3B,IAAI4B,OAAOxB,EAAOoB,GAAK,SAAC/B,EAAOoC,GAEb,OAAVpC,EACAkC,EAAOlC,GAEPiC,EAAQG,SAKnBrC,OAAM,SAAAC,GACHC,QAAQC,IAAIF,MDKRqC,CAAY1B,EAAOD,WACdhB,MAAK,SAAA4C,GAEFT,EAAQS,EAAOjC,SAElBN,OAAM,SAAAC,GAKH0B,EAAS,IACTJ,GAAY,GACZC,OAAOC,aAAae,WAAW,SAC/BtC,QAAQC,IAAI,cAAeF,QAIxC,CAACW,IAIA,6BACI,kBAACI,EAAYyB,SAAb,CAAsBC,MAClB,CAAEpB,WAAUC,cAAaX,QAAOe,WAAUC,QAAOC,WAAUvB,OAAMwB,YAEhEV,EAAMuB,YAMjBC,EAAe5B,EAAY6B,SEjD3BC,EAAe7B,IAAMC,cAAc,IAEnC6B,EAAgB,SAAC3B,GAAU,MAKHC,mBAAS,IALN,mBAKtB2B,EALsB,KAKfC,EALe,OAMH5B,mBAAS,IANN,mBAMtB6B,EANsB,KAMfC,EANe,OAOG9B,mBAAS,IAPZ,mBAOtB+B,EAPsB,KAOZC,EAPY,OAWLC,qBAAWtC,GAA3BV,EAXqB,EAWrBA,KAAMM,EAXe,EAWfA,MAyDd,OAtCAmB,qBAAU,WACN7B,QAAQC,IAAI,iBAjBA,SAACoD,GAEb,IAAIC,GAAc,EAElB,IAAK,IAAIC,KAAQF,EACTA,EAAIG,eAAeD,KACnBD,GAAc,GAItB,OAAOA,EAWFG,CAAQrD,KH9BW,SAACA,GAE7B,OAAOlB,MAAM,GAAD,OAAIC,WAAJ,OAAcC,aAAd,YAA4BgB,EAAKsD,KAAO,CAChDrE,OAAQ,MACRC,QAAS,CACL,eAAgB,sBAGnBG,MAAK,SAAAC,GACF,IAAKA,EAAWC,GACZ,MAAM,IAAIC,MAAM,gBAGpB,OAAOF,EAAWG,UAErBC,OAAM,SAAAC,GAEHC,QAAQC,IAAIF,MGiBZ4D,CAAiBvD,GACZX,MAAK,SAAA4C,GACFU,EAASV,MAKbjC,EAAKsB,QHsFM,SAAChB,GAExB,OAAOxB,MAAM,GAAD,OAAIC,WAAJ,OAAc0B,WAAW,CACjCxB,OAAQ,MACRC,QAAS,CACL,cAAgB,UAAhB,OAA2BoB,GAC3B,eAAgB,sBAGvBjB,MAAK,SAAAC,GACF,IAAIA,EAAWC,GACX,MAAM,IAAIC,MAAM,gBAGpB,OAAOF,EAAWG,UAErBC,OAAM,SAAAC,GACHC,QAAQC,IAAIF,MGpGJ6D,CAAYlD,GACPjB,MAAK,SAAA4C,GACFY,EAASZ,MAEZvC,OAAM,SAAAC,GACHC,QAAQC,IAAIF,MH3BT,SAACW,GAExB,OAAOxB,MAAM,GAAD,OAAIC,WAAJ,OAAcC,cAAc,CACpCC,OAAQ,MACRC,QAAS,CACL,cAAgB,UAAhB,OAA2BoB,GAC3B,eAAgB,sBAGvBjB,MAAK,SAAAC,GACF,IAAIA,EAAWC,GACX,MAAM,IAAIC,MAAM,gBAGpB,OAAOF,EAAWG,UAErBJ,MAAK,SAAA4C,GAEF,OAAOA,KAEVvC,OAAM,SAAAC,GACHC,QAAQC,IAAIF,MGUJ8D,CAAYnD,GACPjB,MAAK,SAAA4C,GACFc,EAAYd,UAK7B,CAACjC,EAAMM,IAIN,6BACI,kBAACkC,EAAaL,SAAd,CAAuBC,MAAO,CAAEM,QAAOC,WAAUC,QAAOC,WAAUC,WAAUC,gBACvEjC,EAAMuB,YAMDG,EAAaD,SC1EpB,SAASmB,EAAK5C,GAAQ,IAAD,EACIH,IAAMI,SAASD,EAAM6C,KAAKC,YAD9B,mBACzBA,EADyB,KACbC,EADa,OAENlD,IAAMI,SAAS6C,EAAa,CAAEE,mBAAoB,gBAAmB,CAACC,kBAAmB,SAFnF,mBAEzBC,EAFyB,KAElBC,EAFkB,OAGFtD,IAAMI,SAAS6C,GAHb,mBAGzBM,EAHyB,KAGhBC,EAHgB,OAKJxD,IAAMqC,WAAWR,GAArCE,EALwB,EAKxBA,MAAOC,EALiB,EAKjBA,SAITyB,EAAa,WAEVR,GAKDK,EAAS,CAAEH,mBAAoB,SAC/BD,GAAc,GACdM,GAAW,KANXF,EAAS,CAAEH,mBAAoB,iBAC/BD,GAAc,GACdM,GAAW,KAmGnB,OACI,6BACI,6BACI,kBAACE,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,QAAQ,SAASC,WAAW,YACpD,kBAACJ,EAAA,EAAD,CAAMK,MAAI,EAACC,IAAE,IACb,kBAACN,EAAA,EAAD,CAAMK,MAAI,EAACC,IAAE,GACT,kBAACC,EAAA,EAAD,CACIV,QAASA,EACTW,SAAU,SAACC,GAAD,OAAWX,EAAWW,EAAMC,OAAOb,UAC7Cc,MAAM,UACNC,QAlGA,WAGpBvG,EAAWoC,EAAM6C,KAAKL,IAAKM,GACtBvE,MAAK,SAAA6F,GAIF,GAAmB,IAAfA,EAASC,EAAS,CAGlB,IAAIC,EAAU,YAAO1C,GAHH,uBAOlB,YAAoB0C,EAApB,+CAAgC,CAAC,IAAxBC,EAAuB,QAExBA,EAAQ/B,MAAQxC,EAAM6C,KAAKL,MAI3B+B,EAAQC,UAAYD,EAAQC,WAblB,kFAkBlB3C,EAASyC,GACThB,QAGP1E,OAAM,SAAAC,GACHC,QAAQC,IAAIF,UAsER,kBAAC0E,EAAA,EAAD,CAAMK,MAAI,EAACC,IAAE,GACT,yBAAKX,MAAO,CAAEuB,UAAW,WACrB,yBAAKvB,MAAOA,GAAZ,UACQlD,EAAM6C,KAAK6B,SAI3B,kBAACnB,EAAA,EAAD,CAAMK,MAAI,EAACC,IAAE,GACT,kBAACc,EAAA,EAAD,CAAYC,aAAW,OAAOT,QA5B9B,WAChBnE,EAAM6E,WAAU,GAChB7E,EAAM8E,QAAQ9E,EAAM6C,KAAK6B,MACzB1E,EAAM+E,UAAU/E,EAAM6C,KAAKL,OA0BP,kBAAC,IAAD,CAAUwC,SAAS,WAGvB,kBAACL,EAAA,EAAD,CAAYC,aAAW,SAAST,QA7E9B,WAKlB,IAAIc,EAAajF,EAAM6C,KAIvB7D,EAAWiG,EAAWzC,KACjBjE,MAAK,SAAA6F,GAIF,GAAmB,IAAfA,EAASC,EAAS,CAGlB,IAEIa,EAFAZ,EAAU,YAAO1C,GAHH,uBAQlB,YAAoBA,EAApB,+CAA2B,CAAC,IAAnB2C,EAAkB,QAEnBA,EAAQ/B,MAAQyC,EAAWzC,MAC3B0C,EAAQtD,EAAMuD,QAAQZ,KAXZ,kFAgBlBD,EAAWc,OAAOF,EAAO,GAGzBrD,EAASyC,GACThB,QAIP1E,OAAM,SAAAC,GACHC,QAAQC,IAAIF,QAuCA,kBAAC,IAAD,CAAYmG,SAAS,YAG7B,kBAACzB,EAAA,EAAD,CAAMK,MAAI,EAACC,IAAE,OCrJlB,SAASjB,EAAK5C,GAGzB,IAAMqF,EAAkB,SAACrB,GAErBhE,EAAM8E,QAAQd,EAAMC,OAAO3C,OAEN,KAAlB0C,EAAMsB,SACLtF,EAAMuF,WAAWvB,IAoBzB,OACI,yBAAKd,MAAO,CAACsC,gBAAiB,YAAaC,QAAS,OAAQC,OAAQ,SAC/D1F,EAAM2F,OAAS,aAAc,YACjC,2BAAOzC,MAAO,CAAC0C,OAAQ,MAAOF,OAAQ,MAAOG,MAAO,MAAOb,SAAU,QACpEc,KAAK,OAAO/B,SAAUsB,EAAiB/D,MAAOtB,EAAM0E,KAAMqB,QAASV,IAhBjErF,EAAM2F,OAMF,4BAAQxB,QAASnE,EAAMgG,aAAvB,QAJA,4BAAQ7B,QAASnE,EAAMuF,YAAvB,QCVhB,IAAMU,EAAY,CAEdC,cAAe,QAGbC,EAAY,CAEdD,cAAe,OACfV,gBAAiB,aAGN,SAASY,EAAYpG,GAAQ,IAAD,EAEfH,IAAMI,SAAS,IAFA,mBAEhCyE,EAFgC,KAE1BI,EAF0B,OAGXjF,IAAMI,UAAS,GAHJ,mBAGhC0F,EAHgC,KAGxBd,EAHwB,OAIXhF,IAAMI,SAAS,IAJJ,mBAIhCoG,EAJgC,KAIxBtB,EAJwB,OAMDlF,IAAMqC,WAAWtC,GAA/CO,EAN+B,EAM/BA,YAAajB,EANkB,EAMlBA,KAAMwB,EANY,EAMZA,QANY,EAObb,IAAMqC,WAAWR,GAApCE,EAPgC,EAOhCA,MAAOC,EAPyB,EAOzBA,SAqIVyE,EAAc,IAAIC,KAEtB,OACI,6BACI,sCAAQrH,EAAKsH,UAAb,YAA0BtH,EAAKuH,SAA/B,cAEA,6BACI,wBAAIvD,MAAO,CAAEuC,QAAS,IA7DN,SAAC7D,GAMzB,OAAOA,EAAM8E,QAAO,SAACC,EAAYC,GAkB7B,OAfI,IAAIL,KAAKK,EAAYC,MAAMC,uBAC3B,IAAIP,KAAKD,GAAaQ,sBAGtBR,EAAcM,EAAYC,KAG1BF,EAAWI,KAAKT,GAChBK,EAAWI,KAAKH,IAIhBD,EAAWI,KAAKH,GAGbD,IAER,IACFK,KAAI,SAACnE,EAAMqC,GAIR,OAKIrC,EAAK6B,KACD,wBAAIxB,MAAO+C,EAAWrF,IAAKsE,GACvB,kBAACtC,EAAD,CAAMC,KAAMA,EACRgC,UAAWA,EACXC,QAASA,EACTC,UAAWA,KAKf,wBAAI7B,MAAOiD,EAAWvF,IAAKsE,GAA3B,gBACc,IAAIqB,KAAK1D,GAAMiE,qBAD7B,cAiBAG,CAAoBrF,KAKhC,6BACI,kBAAC,EAAD,CAAS8C,KAAMA,EAAMI,QAASA,EAC1BS,WAlJG,SAACvB,GAIhB,GAAa,KAATU,EAEA,OACIwC,MAAM,yBNqBO,SAACC,GAE1B,OAAOnJ,MAAM,GAAD,OAAIC,WAAJ,OAAcC,cAAc,CACpCC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBL,KAAMM,KAAKC,UAAU6I,KAEpB5I,MAAK,SAAAC,GACF,IAAKA,EAAWC,GACZ,MAAM,IAAIC,MAAM,gBAGpB,OAAOF,EAAWG,UAErBC,OAAM,SAAAC,GACHC,QAAQC,IAAIF,OMzBhBuI,CARc,CACVP,KAAM,IAAIN,KACV7B,KAAMA,EACN5B,YAAY,EACZuE,OAAQnI,EAAKsD,MAKhBjE,MAAK,SAAA4C,GAGF,IAAImG,EAAY,YAAO1F,GAGvB0F,EAAaP,KAAK5F,GAGlBU,EAASyF,MAIbxC,EAAQ,KAiHIa,OAAQA,EAAQd,UAAWA,EAC3BmB,YA/GI,WAIhBnB,GAAU,GAEK,KAAXwB,EAGAzI,EAAWyI,EAAQ3B,GACdnG,MAAK,SAAA4C,GAGF,IAAIoG,EAAY,YAAO3F,GAHX,uBAQZ,IAAI,IAAJ,IAAmBA,EAAnB,+CAAyB,CAAC,IAAlB2C,EAAiB,QAClBA,EAAQ/B,MAAQ6D,IACf9B,EAAQG,KAAOA,IAVX,kFAeZ7C,EAAS0F,GAGTzC,EAAQ,OAGXlG,OAAM,SAAAC,GACHC,QAAQC,IAAIF,MAGpBqI,MAAM,mBAgFN,4BAAQ/C,QAAS,WAAQ/D,OAAOC,aAAae,WAAW,SAAUjB,GAAY,GAAQ0B,EAAS,IAAKnB,EAAQ,MAA5G,UACA,6BAAK,6BACL,6BAEQxB,EAAKsB,MACD,4BAAQ2D,QAAS,WAAQnE,EAAMwH,QAAQT,KAAK,kBAA5C,cACC,O,+BCnDVU,MAjIf,SAAgBzH,GAAO,MAEOC,mBAAS,IAFhB,mBAEZX,EAFY,KAELoI,EAFK,OAGazH,mBAAS,IAHtB,mBAGZ0H,EAHY,KAGFC,EAHE,OAMyB1F,qBAAWtC,GAA/CM,EANW,EAMXA,SAAUC,EANC,EAMDA,YAAaI,EANZ,EAMYA,SAEzB8E,EAAkB,SAACrB,GAIrB,OAFWA,EAAMC,OAAO4D,MAGpB,IAAK,QACDH,EAAS1D,EAAMC,OAAO3C,OACtB,MAEJ,IAAK,WACDsG,EAAY5D,EAAMC,OAAO3C,SAiFrC,OAjCAX,qBAAU,SAACmH,IAMPA,EAASC,IAAYC,SAAS5H,OAAO6H,SAASC,OAGnCC,MAAM3I,QAIbW,GAAY,GACZI,EAASuH,EAAOK,MAAM3I,OACtBY,OAAOC,aAAa+H,QAAQ,QAASN,EAAOK,MAAM3I,OAClDQ,EAAMwH,QAAQT,KAAK,WAMvB,IAAIsB,EAAajI,OAAOC,aAAaC,QAAQ,SAIzC+H,IACAlI,GAAY,GACZI,EAAS8H,MAGd,IAGC,sCAEI,2BAAOvC,KAAK,QAAQ+B,KAAK,QAAQ9D,SAAUsB,EAAiB/D,MAAOhC,IAAe,6BAFtF,YAII,2BAAOwG,KAAK,WAAW+B,KAAK,WAAW9D,SAAUsB,EAAiB/D,MAAOqG,IAAkB,6BAC3F,kBAACW,EAAA,EAAD,CAAQnE,QA9EY,WAExB,IAAIpG,EAAO,CAAEuB,QAAOqI,YAKpB3J,MAAM,GAAD,OAAIC,WAAJ,OAAc0B,UAAd,UAA+B,CAChCxB,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBL,KAAMM,KAAKC,UAAUP,KAEpBQ,MAAK,SAAAC,GACF,IAAKA,EAAWC,GACZ,MAAM,IAAIC,MAAM,sBAEpB,OAAOF,EAAWG,UAErBJ,MAAK,SAAA4C,GAGmB,KAAjBA,EAAO3B,QAEPW,GAAY,GACZI,EAASY,EAAO3B,OAChBY,OAAOC,aAAa+H,QAAQ,QAASjH,EAAO3B,QAEhDQ,EAAMwH,QAAQT,KAAK,aAEtBnI,OAAM,SAAAC,GACHC,QAAQD,MAAMA,EAAMgJ,KAAMhJ,EAAM0J,cA8CpC,UACA,kBAACD,EAAA,EAAD,CAAQE,UAAWC,IAAOC,GAAG,WAA7B,YACA,6BAAM,6BAEN,uBAAGR,KAAI,UAAKjK,WAAL,OAAe0B,UAAf,uBACH,yBAAKgJ,IAAG,UAAK1K,UAAL,yBAAqC2K,IAAI,eAAelD,OAAO,KAAKG,MAAM,SAEtF,6BAAM,6BACN,uBAAGqC,KAAI,UAAKjK,WAAL,OAAe0B,UAAf,yBACH,yBAAKgJ,IAAG,UAAK1K,UAAL,2BAAuC2K,IAAI,iBAAiBlD,OAAO,KAAKG,MAAM,SAClF,6BAAM,6BAGN3F,EAAW,kBAAC,IAAD,CAAOwI,GAAG,UAAV,YAAsC,KAGzD,6BAAM,6BAAM,6BACZ,6BAEA,uBAAGR,KAAK,6EAAR,oB,SCjIG,SAASW,EAAT,GAA2D,IAAtBC,EAAqB,EAAhCN,UAAyBO,EAAO,6BAErE,OACI,kBAACvH,EAAD,MAEQ,gBAAEtB,EAAF,EAAEA,SAAF,OAEI,kBAAC,IAAD,eACI8I,OAAS,SAAAhJ,GAAK,OAEVE,EAAW,kBAAC4I,EAAc9I,GAAY,kBAAC,IAAD,CAAU0I,GAAG,QAEnDK,OCR5B,IAiVeE,EAjVI,SAACjJ,GAAU,MAOQC,mBAAS,IAPjB,mBAOnBuG,EAPmB,KAOR0C,EAPQ,OAQMjJ,mBAAS,IARf,mBAQnBwG,EARmB,KAQT0C,EARS,OASAlJ,mBAAS,IATT,mBASnBX,EATmB,KASZoI,EATY,OAUMzH,mBAAS,IAVf,mBAUnB0H,EAVmB,KAUTC,EAVS,OAWA3H,oBAAS,GAXT,mBAWnBO,EAXmB,KAWZC,EAXY,OAcEZ,IAAMI,UAAS,GAdjB,mBAcnB0F,EAdmB,KAcXd,EAdW,OAeEhF,IAAMI,SAAS,IAfjB,mBAenBoG,EAfmB,KAeXtB,EAfW,OAkBwBlF,IAAMqC,WAAWtC,GAA3DW,EAlBkB,EAkBlBA,SAAUf,EAlBQ,EAkBRA,MAAOW,EAlBC,EAkBDA,YAAaO,EAlBZ,EAkBYA,QAlBZ,EAmBmCb,IAAMqC,WAAWR,GAAtEG,EAnBkB,EAmBlBA,SAAUC,EAnBQ,EAmBRA,MAAOC,EAnBC,EAmBDA,SAAUC,EAnBT,EAmBSA,SAAUC,EAnBnB,EAmBmBA,YAWvCmH,EAAiB,WACnBF,EAAa,IACbC,EAAY,IACZzB,EAAS,IACTE,EAAY,IACZnH,GAAS,GACToE,GAAU,GACVE,EAAU,KAIRM,EAAkB,SAACrB,GAErB,IAAI6D,EAAO7D,EAAMC,OAAO4D,KACpBvG,EAAQ0C,EAAMC,OAAO3C,MAEzB,OAAQuG,GACJ,IAAK,YACDqB,EAAa5H,GACb,MACJ,IAAK,WACD6H,EAAY7H,GACZ,MACJ,IAAK,QACDoG,EAASpG,GACT,MACJ,IAAK,WACDsG,EAAYtG,KAUlB+H,EAAkB,SAACrF,GAErB,IAAIkB,EAAQlB,EAAMC,OAAO4D,KAErB3I,EAAO4C,EAAMoD,GAEjBgE,EAAahK,EAAKsH,WAClB2C,EAAYjK,EAAKuH,UACjBiB,EAASxI,EAAKI,OACdmB,EAASvB,EAAKsB,OACdoH,EAAY1I,EAAKyI,UAEjB9C,GAAU,GACVE,EAAU7F,EAAKsD,MA8Bb+C,EAAa,YT0CM,SAACrG,EAAMM,GAEhC,IAAIC,EAAY,GAGhB,OAFAA,EAAUC,IAAMR,EAETlB,MAAM,GAAD,OAAIC,WAAJ,OAAc0B,WAAU,CAChCxB,OAAQ,OACRC,QAAS,CACL,cAAgB,UAAhB,OAA2BoB,GAC3B,eAAgB,oBAEpBzB,KAAMM,KAAKC,UAAUmB,KAExBlB,MAAK,SAAAC,GACF,IAAIA,EAAWC,GACX,MAAM,IAAIC,MAAM,wBAGpB,OAAOF,EAAWG,UAErBC,OAAM,SAAAC,GACHC,QAAQC,IAAIF,OSrDZyK,CARc,CACV9C,YACAC,WACAnH,QACAqI,WACAnH,SAGmBhB,GAClBjB,MAAK,SAAA4C,GAGF,IAAIoI,EAAY,YAAOzH,GAGvByH,EAAaxC,KAAK5F,GAGlBY,EAASwH,MAGjBH,KAIEpD,GAAc,SAAChC,GAEjB,IAAIwF,EAAc,CACdhD,YACAC,WACAnH,QACAqI,WACAnH,UTkFc,SAAC6G,EAAOmC,EAAahK,GAE3C,OAAOxB,MAAM,GAAD,OAAIC,WAAJ,OAAc0B,UAAd,YAAyB0H,GAAU,CAC3ClJ,OAAQ,QACRC,QAAS,CACL,cAAgB,UAAhB,OAA2BoB,GAC3B,eAAgB,oBAEpBzB,KAAMM,KAAKC,UAAUkL,KAGxBjL,MAAK,SAAAC,GACF,IAAIA,EAAWC,GACX,MAAM,IAAIC,MAAM,yBAGpB,OAAOF,EAAWG,UAErBC,OAAM,SAAAC,GACHC,QAAQC,IAAIF,OSlGZ4K,CAAWpD,EAAQmD,EAAahK,GAC3BjB,MAAK,SAAA4C,GAIF,GAAyB,IAArBA,EAAOuI,UAAiB,CAGxB,IAAIH,EAAY,YAAOzH,GAHC,uBAMxB,YAAoByH,EAApB,+CAAkC,CAAC,IAA1BhF,EAAyB,QAG9B,GAAIA,EAAQ/B,MAAQ6D,EAAQ,CAGxB,IAAK,IAAIhE,KAAQkC,EACbA,EAAQlC,GAAQmH,EAAYnH,GAIhCN,EAASwH,KAjBO,uFAuBpCH,KAIEO,GAAoB,SAAC3F,GAMvB,IAAIkB,EAAQlB,EAAMC,OAAO4D,MTsBP,SAAC3I,EAAMM,GAE7B,OAAOxB,MAAM,GAAD,OAAIC,WAAJ,OAAc0B,UAAd,YAAyBT,EAAKsD,KAAM,CAC5CrE,OAAQ,SACRC,QAAS,CACL,cAAgB,UAAhB,OAA2BoB,GAC3B,eAAgB,sBAGvBjB,MAAK,SAAAC,GACF,IAAKA,EAAWC,GACZ,MAAM,IAAIC,MAAM,gBAGpB,OAAOF,EAAWG,WS9BlBiL,CAHkB9H,EAAMoD,GAGA1F,GACnBjB,MAAK,SAAA4C,GAGF,GAA4B,IAAxBA,EAAO0I,aAAoB,CAG3B,IAAIN,EAAY,YAAOzH,GAIvByH,EAAanE,OAAOF,EAAO,GAG3BnD,EAASwH,QAenBO,GAAoB,SAAC9F,GAEvB,IAAI+F,EAAK/F,EAAMC,OAAO3C,MAGtBtC,EAAW+K,GACNxL,MAAK,SAAA6F,GAEF,GAA8B,IAA1BA,EAASyF,aAAoB,CAG7B,IAEI3E,EAFA8E,EAAc,YAAOhI,GAHI,uBAQ7B,YAAoBgI,EAApB,+CAAoC,CAAC,IAA5BzF,EAA2B,QAC5BA,EAAQ/B,MAAQuH,IAChB7E,EAAQ8E,EAAe7E,QAAQZ,KAVV,kFAe7ByF,EAAe5E,OAAOF,EAAO,GAG7BjD,EAAY+H,OAInBpL,OAAM,SAAAC,GACHC,QAAQC,IAAIF,OAOxB,OACI,mDACuB,6BACnB,2CAEI,2BAAOiH,KAAK,OAAO+B,KAAK,YAAY9D,SAAUsB,EAAiB/D,MAAOkF,IAAmB,6BAF7F,aAIQ,2BAAOV,KAAK,OAAO+B,KAAK,WAAW9D,SAAUsB,EAAiB/D,MAAOmF,IAAkB,6BAJ/F,SAMQ,2BAAOX,KAAK,QAAQ+B,KAAK,QAAQ9D,SAAUsB,EAAiB/D,MAAOhC,IAAe,6BAN1F,YAQQ,2BAAOwG,KAAK,WAAW+B,KAAK,WAAW9D,SAAUsB,EAAiB/D,MAAOqG,IAAkB,6BAE/F,kBAAC,IAAD,CAAUvE,QAAS5C,EAAOuD,SAAU,WAAQtD,GAAUD,IAAUc,MAAOd,IAV3E,UAUoG,6BAtLnGmF,EAMG,4BAAQxB,QAAS6B,IAAjB,QAJA,4BAAQ7B,QAASoB,GAAjB,YAwLJ,6BACI,6BAAM,6BACN,4BAAQpB,QAAS,WAAQ/D,OAAOC,aAAae,WAAW,SAAUb,EAAS,IAAKJ,GAAY,GAAQ0B,EAAS,IAAKnB,EAAQ,MAA1H,UACA,kBAAC,IAAD,CAAOgI,GAAG,UAAV,SACA,4BAAQvE,QAASiF,GAAjB,eAGJ,yBAAKlG,MAAO,CAAE+G,MAAO,OAAQxF,UAAW,SACpC,sCACA,4BAEQ3C,EAAMkF,KAAI,SAAC1F,EAAO4D,GAEd,OACI,wBAAItE,IAAKU,EAAMkB,KAAf,UACQlB,EAAMkB,IADd,cACuBlB,EAAMkF,UAD7B,eAC6ClF,EAAMhC,MADnD,eAC+DgC,EAAMd,MAAQ,QAAU,YADvF,OAEI,4BAAQ2D,QAASwF,GAAmB9B,KAAM3C,GAA1C,UACA,4BAAQf,QAASkF,EAAiBxB,KAAM3C,GAAxC,aAOpB,oDACA,4BAIQlD,EAASkI,QAAQ,SAACrH,GACd,IAAIsH,GAAW,EAaf,OATArI,EAAMsI,SAAQ,SAAClL,GAEP2D,EAAKwE,SAAWnI,EAAKsD,MACrB2H,GAAW,MAMZA,KAERnD,KAAI,SAAC1F,EAAO4D,GAEX,OACI,wBAAItE,IAAKsE,GAAT,UACQ5D,EAAMoD,KADd,eACyBpD,EAAM+F,QAC3B,4BAAQlD,QAAS2F,GAAmBxI,MAAOA,EAAMkB,KAAjD,kBCzUrB,SAAS6H,EAAMrK,GAG1B,OACI,yBAAKkD,MAAO,CAAEsC,gBAAiB,YAAaC,QAAS,SACjD,6C,+BCqHG6E,MAxHf,SAAgBtK,GAAQ,IAAD,EAEOC,mBAAS,CAC/BuG,UAAW,GACXC,SAAU,GACVnH,MAAO,GACPqI,SAAU,KANK,mBAEZ4C,EAFY,KAELC,EAFK,KASbnF,EAAkB,SAACrB,GAErB,IAAIyG,EAAM,eAAQF,GAElB,OAAQvG,EAAMC,OAAO8F,IACjB,IAAK,YACDU,EAAOjE,UAAYxC,EAAMC,OAAO3C,MAChC,MACJ,IAAK,WACDmJ,EAAOhE,SAAWzC,EAAMC,OAAO3C,MAC/B,MACJ,IAAK,QACDmJ,EAAOnL,MAAQ0E,EAAMC,OAAO3C,MAC5B,MACJ,IAAK,WACDmJ,EAAO9C,SAAW3D,EAAMC,OAAO3C,MAMvCkJ,EAASC,IA4Cb,OACI,6BACI,kBAACC,EAAA,EAAD,CAAOC,UAAW,EAAGzH,MAAO,CAAEuC,QAAS,GAAIG,OAAQ,QAC/C,6BACI,kBAACgF,EAAA,EAAD,CAAWC,UAAQ,EACfd,GAAG,YACHe,MAAM,aACNxJ,MAAOiJ,EAAM/D,UACbzC,SAAUsB,KAGlB,6BACI,kBAACuF,EAAA,EAAD,CAAWC,UAAQ,EACfd,GAAG,WACHe,MAAM,YACNxJ,MAAOiJ,EAAM9D,SACb1C,SAAUsB,KAGlB,6BACI,kBAACuF,EAAA,EAAD,CAAWC,UAAQ,EACfd,GAAG,QACHe,MAAM,QACNxJ,MAAOiJ,EAAMjL,MACbyE,SAAUsB,KAGlB,6BACI,kBAACuF,EAAA,EAAD,CAAWC,UAAQ,EACfd,GAAG,WACHe,MAAM,WACNhF,KAAK,WACLxE,MAAOiJ,EAAM5C,SACb5D,SAAUsB,KAGlB,6BACA,kBAACiD,EAAA,EAAD,CAAQyC,QAAQ,YAAY7G,MAAM,UAAUC,QA9EjC,WAKnB,IAAK,IAAI9B,KAAQkI,EACb,GAAoB,KAAhBA,EAAMlI,GAEN,OADA6E,MAAM,+BACC,KAKf,IAAIhI,EAAO,CACPsH,UAAW+D,EAAM/D,UACjBC,SAAU8D,EAAM9D,SAChBnH,MAAOiL,EAAMjL,MACbqI,SAAU4C,EAAM5C,SAChBnH,OAAO,GAGX1B,QAAQC,IAAIG,GAIZD,EAAqBC,GACpBX,MAAK,SAAA4C,GAEF+F,MAAM,iBAGNlH,EAAMwH,QAAQT,KAAK,QAEtBnI,OAAM,SAAAC,GACHqI,MAAM,wBA4CF,YACA,kBAACoB,EAAA,EAAD,CAAQpE,MAAM,YAAYC,QAAS,WAAQnE,EAAMwH,QAAQT,KAAK,OAA9D,aCtFDiE,MArBf,SAAoBhL,GAChB,OACI,6BACI,kBAAC,IAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,KACA,kBAACqK,EAAD,MACA,kBAAC,IAAD,KACI,kBAACxB,EAAD,CAAgBoC,KAAK,SAASzC,UAAWpC,IACzC,kBAACyC,EAAD,CAAgBoC,KAAK,eAAezC,UAAWS,IAC/C,kBAAC,IAAD,CAAOgC,KAAK,UAAUzC,UAAW8B,IACjC,kBAAC,IAAD,CAAOW,KAAK,IAAIzC,UAAWf,UCVpCyD,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCKcC,QACW,cAA7BhL,OAAO6H,SAASoD,UAEe,UAA7BjL,OAAO6H,SAASoD,UAEhBjL,OAAO6H,SAASoD,SAASC,MACvB,2DCZNC,IAASvC,OAAO,kBAAC,EAAD,MAASwC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrN,MAAK,SAAAsN,GACJA,EAAaC,gBAEdlN,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM0J,a,kBExI5B,IAGMwD,EAAa,CACf,CACIlF,MAAO,IAAIN,MAAQO,qBACnBpC,KAAM,gBACN5B,YAAY,GAEhB,CACI+D,MAAO,IAAIN,MAAQO,qBACnBpC,KAAM,wCACN5B,YAAY,IAiBpBkJ,EAAOC,QAAQhO,QALX,GAMJ+N,EAAOC,QAAQ/N,WA9BI,SA+BnB8N,EAAOC,QAAQtM,QA9BC,SA+BhBqM,EAAOC,QAAQ1M,QA9BC,SA+BhByM,EAAOC,QAAQF,WAAaA,I","file":"static/js/main.b0e4d702.chunk.js","sourcesContent":["import { uriBase, currentApi, userApi, JWT_KEY } from './const'\nimport jwt from 'jsonwebtoken'\n\n/*\nThis file contains all the fetch requests used in our react app\n*/\n\n/* fetch requests regarding tasks */\n//#region \n\n// GET all the tasks by user id\nexport const getTasksByUserId = (user) => {\n\n    return fetch(`${uriBase}${currentApi}/${user._id}`, {\n        method: 'GET',\n        headers: {\n            \"Content-Type\": \"application/json\",\n        }\n    })\n        .then(httpResult => {\n            if (!httpResult.ok) {\n                throw new Error(\"Bad response\")\n            }\n\n            return httpResult.json()\n        })\n        .catch(error => {\n\n            console.log(error)\n        })\n}\n\n// get all tasks regarless of users\nexport const getAllTasks = (token) => {\n\n    return fetch(`${uriBase}${currentApi}`, {\n        method: 'GET',\n        headers: {\n            \"Authorization\": `Bearer ${token}`,\n            \"Content-Type\": \"application/json\"\n        }\n    })\n    .then(httpResult => {\n        if(!httpResult.ok){\n            throw new Error(\"Bad response\")\n        }\n        \n        return httpResult.json()\n    })\n    .then(result => {\n\n        return result\n    })\n    .catch(error => {\n        console.log(error)\n    })\n}\n\n// POST - Create new task given a task object\nexport const createNewTask = (newTask) => {\n\n    return fetch(`${uriBase}${currentApi}`, {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(newTask)\n    })\n        .then(httpResult => {\n            if (!httpResult.ok) {\n                throw new Error(\"Bad response\")\n            }\n\n            return httpResult.json()\n        })\n        .catch(error => {\n            console.log(error)\n        })\n}\n\n// PATCH - update task given task id and what to change\n// currently only the text and isComplete fields can be changed\nexport const updateTask = (taskId, change) => {\n\n    let body = {}\n\n    if(typeof change == typeof true){\n\n        body = {\"isComplete\": !change}\n    }\n    else if (typeof change == typeof ''){\n        \n        body = {\"text\": change}\n    }\n\n    return fetch(`${uriBase}${currentApi}/${taskId}`, {\n        method: \"PATCH\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(body)\n    })\n        .then(httpResult => {\n            if (!httpResult.ok) {\n                throw new Error(\"Could not update with edit\")\n            }\n\n            return httpResult.json()\n        })\n        .catch(error => {\n            console.log(error)\n        })\n}\n\n// DELETE - delete a task given a task id\nexport const deleteTask = (taskId) => {\n\n    return fetch(`${uriBase}${currentApi}/${taskId}`, {\n        method: \"DELETE\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n        }\n    })\n    .then(httpResult => {\n        if (!httpResult.ok) {\n            throw new Error(\"Bad response\")\n        }\n\n        return httpResult.json()\n    })\n}\n\n//#endregion\n\n/* fetch requrests regarding users */\n//#region \n\n// GET all users\nexport const getAllUsers = (token) => {\n\n    return fetch(`${uriBase}${userApi}`, {\n        method: 'GET',\n        headers: {\n            \"Authorization\": `Bearer ${token}`,\n            \"Content-Type\": \"application/json\"\n        }\n    })\n    .then(httpResult => {\n        if(!httpResult.ok){\n            throw new Error(\"Bad response\")\n        }\n\n        return httpResult.json()\n    })\n    .catch(error => {\n        console.log(error)\n    })\n}\n\n// POST - create new user\nexport const createNewUser = (user, token) => {\n\n    let createObj = {}\n    createObj.doc = user\n\n    return fetch(`${uriBase}${userApi}`,{ \n        method: \"POST\",\n        headers: {\n            \"Authorization\": `Bearer ${token}`,\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(createObj)\n    })\n    .then(httpResult => {\n        if(!httpResult.ok){\n            throw new Error(\"CreateNewUser Failed\")\n        }\n\n        return httpResult.json()\n    })\n    .catch(error => {\n        console.log(error)\n    })\n}\n\n// POST - create new user not signed in\nexport const createNewUserNoToken = async (user) => {\n\n    //make a token\n    let token = await jwt.sign({email:\"spencernelson144@gmail.com\"}, JWT_KEY)\n\n    let createObj = {}\n    createObj.doc = user\n\n    return fetch(`${uriBase}${userApi}`,{ \n        method: \"POST\",\n        headers: {\n            \"Authorization\": `Bearer ${token}`,\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(createObj)\n    })\n    .then(httpResult => {\n        if(!httpResult.ok){\n            throw new Error(\"CreateNewUser Failed\")\n        }\n\n        return httpResult.json()\n    })\n    .catch(error => {\n        console.log(error)\n    })\n}\n\n// delete user\nexport const deleteUser = (user, token) => {\n\n    return fetch(`${uriBase}${userApi}/${user._id}`,{\n        method: \"DELETE\",\n        headers: {\n            \"Authorization\": `Bearer ${token}`,\n            \"Content-Type\": \"application/json\"\n        }\n    })\n    .then(httpResult => {\n        if (!httpResult.ok) {\n            throw new Error(\"Bad response\")\n        }\n\n        return httpResult.json()\n    })\n}\n\n// PATCH - update user\nexport const updateUser = (userId,updatedUser, token) => {\n\n    return fetch(`${uriBase}${userApi}/${userId}`, {\n        method: \"PATCH\",\n        headers: {\n            \"Authorization\": `Bearer ${token}`,\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(updatedUser)\n\n    })\n    .then(httpResult => {\n        if(!httpResult.ok){\n            throw new Error(\"Could not update user\")\n        }\n\n        return httpResult.json()\n    })\n    .catch(error => {\n        console.log(error)\n    })\n}\n\n//#endregion\n\n","import React from 'react';\nimport { verifyToken } from '../jwtUtils';\nimport { JWT_KEY } from '../const';\n\nconst AuthContext = React.createContext({})\n\nconst AuthProvider = (props) => {\n\n    const [loggedIn, setLoggedIn] = React.useState(false)\n    const [token, setToken] = React.useState(window.localStorage.getItem('token'))\n    const [admin, setAdmin] = React.useState(false)\n    const [user, setUser] = React.useState({})\n\n\n    // we want to load tasks for the user in the token\n    React.useEffect(() => {\n\n        // if there is a token set\n        if (token) {\n\n            // verify the token\n            // set user state\n            verifyToken(token, JWT_KEY)\n                .then(result => {\n                    //update user state\n                    setUser(result.user)\n                })\n                .catch(error => {\n\n                    //if something goes wrong with verifying\n                    //the token, clear the tokens\n                    //and set loggedIn to false\n                    setToken('')\n                    setLoggedIn(false)\n                    window.localStorage.removeItem('token')\n                    console.log(\"AuthContext\", error)\n                })\n        }\n\n    }, [token])\n\n\n    return (\n        <div>\n            <AuthContext.Provider value={\n                { loggedIn, setLoggedIn, token, setToken, admin, setAdmin, user, setUser }\n            }>\n                {props.children}\n            </AuthContext.Provider>\n        </div>\n    );\n};\n\nconst AuthConsumer = AuthContext.Consumer\nexport { AuthProvider, AuthConsumer, AuthContext }","import jwt from 'jsonwebtoken'\n\nexport function verifyToken(token, key) {\n\n    return new Promise((resolve, reject) => {\n\n        jwt.verify(token, key, (error, payload) => {\n\n            if (error !== null) {\n                reject(error)\n            } else {\n                resolve(payload)\n            }\n        })\n\n    })\n    .catch(error => {\n        console.log(error)\n    })\n}","import React, { useState, useContext, useEffect } from 'react';\nimport { AuthContext } from './AuthContext';\nimport { getTasksByUserId, getAllUsers, getAllTasks } from '../fetchUtils'\n\nconst TasksContext = React.createContext({})\n\nconst TasksProvider = (props) => {\n\n    // set our state:\n    // we want our components to see what\n    // tasks are available\n    const [tasks, setTasks] = useState([])\n    const [users, setUsers] = useState([])\n    const [allTasks, setAllTasks] = useState([])\n\n    // we will need our token to get our user\n    // and know which tasks to get\n    const { user, token } = useContext(AuthContext)\n\n    // helper function to see if an object is empty\n    const isEmpty = (obj) => {\n\n        let returnValue = true\n\n        for (let prop in obj) {\n            if (obj.hasOwnProperty(prop)) {\n                returnValue = false\n            }\n        }\n\n        return returnValue\n    }\n\n    // the first time our app loads we want to\n    // send a request to our server for \n    // information\n    useEffect(() => {\n        console.log(\"Tasks Context\")\n\n        // if there is a user\n        // then get information from server\n        if (!isEmpty(user)) {\n\n            // get all tasks associated\n            // with that user\n            getTasksByUserId(user)\n                .then(result => {\n                    setTasks(result)\n                })\n\n            // only get this information from the\n            // server if the user is admin\n            if (user.admin) {\n                \n                // get all users in the db\n                getAllUsers(token)\n                    .then(result => {\n                        setUsers(result)\n                    })\n                    .catch(error => {\n                        console.log(error)\n                    })\n\n                // get all tasks\n                getAllTasks(token)\n                    .then(result => {\n                        setAllTasks(result)\n                    })\n            }\n        }\n\n    }, [user, token])\n\n\n    return (\n        <div>\n            <TasksContext.Provider value={{ tasks, setTasks, users, setUsers, allTasks, setAllTasks }}>\n                {props.children}\n            </TasksContext.Provider>\n        </div>\n    );\n};\n\nconst TasksConsumer = TasksContext.Consumer\nexport { TasksProvider, TasksConsumer, TasksContext }","import React from 'react';\nimport { updateTask, deleteTask } from '../fetchUtils'\nimport Checkbox from '@material-ui/core/Checkbox';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport IconButton from '@material-ui/core/IconButton';\nimport EditIcon from '@material-ui/icons/Edit'\nimport Grid from '@material-ui/core/Grid'\nimport { TasksContext } from './TasksContext'\n\nexport default function Task(props) {\n    const [isComplete, setIsComplete] = React.useState(props.task.isComplete)\n    const [style, setStyle] = React.useState(isComplete ? { textDecorationLine: 'line-through' } : {extDecorationLine: 'none'})\n    const [checked, setChecked] = React.useState(isComplete);\n\n    const { tasks, setTasks } = React.useContext(TasksContext)\n\n    // function to update the look\n    // crossing out completed tasks\n    const updateLook = () => {\n\n        if (!isComplete) {\n            setStyle({ textDecorationLine: 'line-through' })\n            setIsComplete(true)\n            setChecked(true)\n        } else {\n            setStyle({ textDecorationLine: 'none' })\n            setIsComplete(false)\n            setChecked(false)\n        }\n\n    }\n\n    // update the db with the task\n    // that is complete\n    const onClickComplete = () => {\n\n        // update task with id and new isComplete\n        updateTask(props.task._id, isComplete)\n            .then(response => {\n\n                //if the response tells us that\n                //one item was changed\n                if (response.n === 1) {\n\n                    // copy state\n                    let updatedArr = [...tasks]\n\n\n                    // find the indexOf the deleted task\n                    for (let element of updatedArr) {\n\n                        if (element._id === props.task._id) {\n\n                            //update the completed prop\n                            // by just switching boolean\n                            element.complete = !element.complete\n                        }\n                    }\n\n                    //set the state\n                    setTasks(updatedArr)\n                    updateLook()\n                }\n            })\n            .catch(error => {\n                console.log(error)\n            })\n    }\n\n    // delete the task\n    const onClickDelete = () => {\n\n        // the task we are deleting\n        // we want to save a copy in\n        // memory\n        let removeTask = props.task\n\n        // remove task from the db and\n        // update the tasks array\n        deleteTask(removeTask._id)\n            .then(response => {\n\n                //if the response tells us that\n                //one item was deleted\n                if (response.n === 1) {\n\n                    // copy state\n                    let updatedArr = [...tasks]\n\n                    let index\n\n                    // find the indexOf the deleted task\n                    for (let element of tasks) {\n\n                        if (element._id === removeTask._id) {\n                            index = tasks.indexOf(element)\n                        }\n                    }\n\n                    //remove it from the tasks array\n                    updatedArr.splice(index, 1)\n\n                    //set the state\n                    setTasks(updatedArr)\n                    updateLook()\n                }\n\n            })\n            .catch(error => {\n                console.log(error)\n            })\n    }\n\n    // move the task information into the edit\n    // bar and change the button\n    const onClickEdit = () => {\n        props.setIsEdit(true)\n        props.setText(props.task.text)\n        props.setEditId(props.task._id)\n    }\n\n\n    return (\n        <div>\n            <div  >\n                <Grid container spacing={0} justify=\"center\" alignItems=\"baseline\">\n                    <Grid item xs></Grid>\n                    <Grid item xs>\n                        <Checkbox\n                            checked={checked}\n                            onChange={(event) => setChecked(event.target.checked)}\n                            color=\"primary\"\n                            onClick={onClickComplete}\n                        />\n                    </Grid>\n                    <Grid item xs>\n                        <div style={{ textAlign: 'center' }}>\n                            <div style={style}>\n                                {`${props.task.text}`}\n                            </div>\n                        </div>\n                    </Grid>\n                    <Grid item xs>\n                        <IconButton aria-label=\"edit\" onClick={onClickEdit}>\n                            <EditIcon fontSize='small'></EditIcon>\n                        </IconButton>\n\n                        <IconButton aria-label=\"delete\" onClick={onClickDelete}>\n                            <DeleteIcon fontSize=\"small\" />\n                        </IconButton>\n                    </Grid>\n                    <Grid item xs></Grid>\n                </Grid>\n\n            </div>\n        </div>\n    )\n}","import React from 'react';\n\nexport default function Task(props) {\n\n    // update the textfield to show what we type\n    const onChangeHandler = (event) => {\n\n        props.setText(event.target.value)\n\n        if(event.keyCode === 13){\n            props.onClickAdd(event)\n        }\n    }\n\n    // function to display button\n    // depending on the state\n    const createButton = () => {\n\n        if(!props.isEdit){\n            return (\n                <button onClick={props.onClickAdd}>Add</button>\n            )\n        } else {\n            return (\n                <button onClick={props.onClickEdit}>Edit</button>\n            )\n        }\n\n    }\n\n    return(\n        <div style={{backgroundColor: \"lightblue\", padding: '10px', height: '50px'}}>\n            {props.isEdit ? \"Edit Task:\": \"New Task:\"}\n         <input style={{margin: '5px', height: '50%', width: '35%', fontSize: '16px'}}\n          type='text' onChange={onChangeHandler} value={props.text} onKeyUp={onChangeHandler}>\n          </input>\n            {createButton()}\n        </div>\n    )\n}","import React from 'react';\nimport Task from './Task'\nimport AddTask from './AddTask'\nimport { AuthContext } from './AuthContext'\nimport { TasksContext } from './TasksContext'\nimport { createNewTask, updateTask} from '../fetchUtils'\n\n//const ls = require('local-storage')\n\n\nconst listStyle = {\n\n    listStyleType: 'none',\n}\n\nconst dateStyle = {\n\n    listStyleType: 'none',\n    backgroundColor: 'lightBlue'\n}\n\nexport default function ListOfTasks(props) {\n\n    const [text, setText] = React.useState('')\n    const [isEdit, setIsEdit] = React.useState(false)\n    const [editId, setEditId] = React.useState('')\n\n    const { setLoggedIn, user, setUser} = React.useContext(AuthContext)\n    const {tasks, setTasks} = React.useContext(TasksContext)\n\n    // function adds \n    const onClickAdd = (event) => {\n\n        // check to see if the task is empty\n        // if it is, send an alert\n        if (text === '') {\n\n            return (\n                alert(\"Task cannot be empty\")\n            )\n        }\n\n        // construct the new task object\n        let newTask = {\n            date: new Date(),\n            text: text,\n            isComplete: false,\n            userId: user._id\n        }\n\n        // add the object to the database and refresh\n        createNewTask(newTask)\n        .then(result => {\n\n            // copy our current tasks state\n            let updatedArray = [...tasks]\n\n            //push our added task\n            updatedArray.push(result)\n\n            //set our state\n            setTasks(updatedArray)\n        })\n\n        //clear text field\n        setText('')\n    }\n\n    const onClickEdit = () => {\n\n        // return the view to the add task\n        // state\n        setIsEdit(false)\n\n        if (editId !== '') {\n\n            // update task in db\n            updateTask(editId, text)\n                .then(result => {\n\n                    // copy the state\n                    let updatedTasks = [...tasks]\n\n                    // look for the element with the\n                    // id that was edited\n                    // and change the text\n                    for(let element of tasks){\n                        if(element._id === editId){\n                            element.text = text\n                        }\n                    }\n\n                    // set state with updated tasks\n                    setTasks(updatedTasks)\n\n                    // clear the textbox\n                    setText('')\n\n                })\n                .catch(error => {\n                    console.log(error)\n                })\n        } else {\n            alert(\"Cannot Edit\")\n        }\n    }\n\n    const tasksToDisplayArray = (tasks) => {\n        // here we reduce our tasks array, pulling out unique dates\n        // and making them their own items in the display array\n        // later with our map we will return the date\n        // as its own <li>\n\n        return tasks.reduce((displayArr, currentTask) => {\n\n            // if the date is not the previous date\n            if (new Date(currentTask.date).toLocaleDateString() !==\n                new Date(currentDate).toLocaleDateString()) {\n\n                // store the current date\n                currentDate = currentTask.date\n\n                // push the date and then push the task\n                displayArr.push(currentDate)\n                displayArr.push(currentTask)\n            } else {\n                // if the date is the same as the previous task\n                // then just push the task\n                displayArr.push(currentTask)\n            }\n\n            return displayArr\n\n        }, []) // end of reduce()\n        .map((task, index) => {\n            // This map function will translate our\n            // display array to li items\n\n            return (\n\n                // if the text exists then we know that the\n                // item is not just a date and we will display\n                // all the task information\n                task.text ? (\n                    <li style={listStyle} key={index}>\n                        <Task task={task}\n                            setIsEdit={setIsEdit}\n                            setText={setText}\n                            setEditId={setEditId}></Task>\n                    </li>\n                    // if the item has no text property then\n                    // we will just display the date.\n                ) : (\n                        <li style={dateStyle} key={index}>\n                            {`***** ${new Date(task).toLocaleDateString()} *****`}\n                        </li>\n                    )\n            )\n        }) // end of map()\n    } // end of tasksToDisplayArr()\n\n    let currentDate = new Date()\n\n    return (\n        <div>\n            <h4>{`${user.firstName} ${user.lastName}'s Tasks:`}</h4>\n\n            <div >\n                <ul style={{ padding: 0 }}>\n                    {\n                        tasksToDisplayArray(tasks)\n                    }\n                </ul>\n            </div>\n\n            <div>\n                <AddTask text={text} setText={setText}\n                    onClickAdd={onClickAdd}\n                    isEdit={isEdit} setIsEdit={setIsEdit}\n                    onClickEdit={onClickEdit} >\n                </AddTask>\n            </div>\n\n            <button onClick={() => { window.localStorage.removeItem(\"token\"); setLoggedIn(false); setTasks([]); setUser({}) }}>LOGOUT</button>\n            <br/><br/>\n            <div>\n                {\n                    user.admin ? (\n                        <button onClick={() => { props.history.push('/create-user')}}>Admin Page</button>\n                    ) : (null)\n                }\n            </div>\n            \n            \n        </div>\n    )\n}","import React, { useContext, useState, useEffect } from 'react';\nimport { AuthContext } from './AuthContext'\nimport { uriBase, userApi } from '../const'\nimport queryString from 'query-string'\nimport { Link as RLink } from 'react-router-dom'\nimport Button from '@material-ui/core/Button'\n\n//const ls = require('local-storage')\n\nfunction SignIn(props) {\n    //State\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n\n    //Context\n    const { loggedIn, setLoggedIn, setToken } = useContext(AuthContext)\n\n    const onChangeHandler = (event) => {\n\n        let name = event.target.name\n\n        switch (name) {\n            case 'email':\n                setEmail(event.target.value)\n                break;\n\n            case 'password':\n                setPassword(event.target.value)\n                break\n            default:\n                break;\n        }\n\n    }\n\n    // email password sign in\n    const onClickHandlerLogIn = () => {\n\n        let body = { email, password }\n\n        // Post the email and password to the api\n        // if an email is found and it matches the\n        // password, it will return a json web token\n        fetch(`${uriBase}${userApi}/login`, {\n            method: 'POST',\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(body)\n        })\n            .then(httpResult => {\n                if (!httpResult.ok) {\n                    throw new Error(\"Could not get user\")\n                }\n                return httpResult.json()\n            })\n            .then(result => {\n\n                // if a token was returned\n                if (result.token !== '') {\n\n                    setLoggedIn(true)\n                    setToken(result.token)\n                    window.localStorage.setItem(\"token\", result.token)\n                }\n                props.history.push('/tasks')\n            })\n            .catch(error => {\n                console.error(error.name, error.message)\n            })\n    }\n\n    // oauth sign in and token sign in\n    // we only want to run this once,\n    // when to app first loads\n    useEffect((parsed) => {\n\n        // we look at the href on the window to see if a\n        // token is there\n        // if the user logged in through google or facebook\n        // it would appear there\n        parsed = queryString.parseUrl(window.location.href)\n\n        //if the token is there\n        if (parsed.query.token) {\n\n            // we log the user in and\n            // write the token to local storage\n            setLoggedIn(true)\n            setToken(parsed.query.token)\n            window.localStorage.setItem(\"token\", parsed.query.token)\n            props.history.push('/tasks')\n        }\n\n\n        // either way we we then look at the local\n        // storage to see if there is already a token\n        let localToken = window.localStorage.getItem(\"token\")\n\n        // if the token there we will log the user in\n        // and set our state\n        if (localToken) {\n            setLoggedIn(true)\n            setToken(localToken)\n        }\n\n    }, [])\n\n    return (\n        <div>\n            Email:\n            <input type='email' name=\"email\" onChange={onChangeHandler} value={email}></input><br />\n            Password:\n            <input type='password' name=\"password\" onChange={onChangeHandler} value={password}></input><br />\n            <Button onClick={onClickHandlerLogIn}>Log In</Button>\n            <Button component={RLink} to='/signup'>Sign Up!</Button>\n            <br /><br />\n\n            <a href={`${uriBase}${userApi}/auth/google/login`}>\n                <img src={`${uriBase}/img/google_login.png`} alt='Google Login' height='45' width='190'></img>\n            </a>\n            <br /><br />\n            <a href={`${uriBase}${userApi}/auth/facebook/login`}>\n                <img src={`${uriBase}/img/facebook_login.png`} alt='Facebook Login' height='45' width='190'></img>\n                </a><br /><br />\n\n                {\n                    loggedIn ? <RLink to='/tasks'>To Tasks</RLink> : null\n                }\n\n            <br /><br /><br />\n            <br />\n\n            <a href=\"https://www.termsfeed.com/privacy-policy/8f4f66fa4c830b22fc9a54a9b3601b26\">Privacy Policy</a>\n        </div>\n    );\n}\n\nexport default SignIn;","import React from 'react'\nimport {Route, Redirect} from 'react-router-dom'\nimport {AuthConsumer} from './AuthContext'\n\nexport default function ProtectedRoute ({component: Component, ...rest}) {\n\n    return (\n        <AuthConsumer>\n            {\n                ({loggedIn}) => (\n\n                    <Route\n                        render ={props => \n\n                            loggedIn ? <Component {...props} /> : <Redirect to='/'/>\n                        }\n                        {...rest}\n                    />\n                )\n            }\n        </AuthConsumer>\n    )\n\n}","import React, { useState } from 'react';\nimport { AuthContext } from './AuthContext'\nimport { createNewUser, deleteUser, updateUser, deleteTask } from '../fetchUtils'\nimport { Link as RLink } from 'react-router-dom'\nimport { TasksContext } from './TasksContext'\n\nimport CheckBox from '@material-ui/core/Checkbox'\n\nconst CreateUser = (props) => {\n\n    /* State and Context */\n\n    //#region \n\n    // state for our textfields\n    const [firstName, setFirstName] = useState('')\n    const [lastName, setLastName] = useState('')\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n    const [admin, setAdmin] = useState(false)\n\n    // state for our edit buttons\n    const [isEdit, setIsEdit] = React.useState(false)\n    const [editId, setEditId] = React.useState('')\n\n    // context\n    const { setToken, token, setLoggedIn, setUser } = React.useContext(AuthContext)\n    const { setTasks, users, setUsers, allTasks, setAllTasks } = React.useContext(TasksContext)\n\n    //#endregion\n\n    /* \n    Functions for our text fields\n    and other form functions\n    */\n\n    //#region\n    // clear the text feilds and edit state\n    const clearUserState = () => {\n        setFirstName('')\n        setLastName('')\n        setEmail('')\n        setPassword('')\n        setAdmin(false)\n        setIsEdit(false)\n        setEditId('')\n    }\n\n    // update our fields as we type\n    const onChangeHandler = (event) => {\n\n        let name = event.target.name\n        let value = event.target.value\n\n        switch (name) {\n            case 'firstName':\n                setFirstName(value)\n                break;\n            case 'lastName':\n                setLastName(value)\n                break\n            case 'email':\n                setEmail(value)\n                break\n            case 'password':\n                setPassword(value)\n                break\n            default:\n                break;\n        }\n\n    }\n\n    // this function updates our fields with\n    // information of the user we want to edit\n    const onUserEditClick = (event) => {\n\n        let index = event.target.name\n\n        let user = users[index]\n\n        setFirstName(user.firstName)\n        setLastName(user.lastName)\n        setEmail(user.email)\n        setAdmin(user.admin)\n        setPassword(user.password)\n\n        setIsEdit(true)\n        setEditId(user._id)\n\n    }\n\n    // this function displays either the\n    // add button or edit button depending on\n    // the state of isEdit\n    const createButton = () => {\n\n        if (!isEdit) {\n            return (\n                <button onClick={onClickAdd}>Add New</button>\n            )\n        } else {\n            return (\n                <button onClick={onClickEdit}>Edit</button>\n            )\n        }\n\n    }\n    //#endregion\n\n    /* \n    Functions that make calls to our api\n    Creating, updating or deleteing users\n    */\n\n    //#region \n\n    //CREATE a user\n    const onClickAdd = () => {\n\n        let newUser = {\n            firstName,\n            lastName,\n            email,\n            password,\n            admin\n        }\n\n        createNewUser(newUser, token)\n            .then(result => {\n\n                // copy state\n                let updatedUsers = [...users]\n\n                // push on our new user\n                updatedUsers.push(result)\n\n                // update state\n                setUsers(updatedUsers)\n            })\n\n        clearUserState()\n    }\n\n    //EDIT user\n    const onClickEdit = (event) => {\n\n        let updatedUser = {\n            firstName,\n            lastName,\n            email,\n            password,\n            admin\n        }\n\n        updateUser(editId, updatedUser, token)\n            .then(result => {\n\n                // if we get the response\n                // that one was modified\n                if (result.nModified === 1) {\n\n                    // copy our state\n                    let updatedUsers = [...users]\n\n                    // loop through our users\n                    for (let element of updatedUsers) {\n\n                        // find the element with matching id\n                        if (element._id === editId) {\n\n                            // replace the props\n                            for (let prop in element) {\n                                element[prop] = updatedUser[prop]\n                            }\n\n                            // update state\n                            setUsers(updatedUsers)\n                        }\n                    }\n                }\n            })\n\n        clearUserState()\n    }\n\n    //DELETE user\n    const onUserDeleteClick = (event) => {\n\n\n        // the name our of event target is\n        // the index of the user in the \n        // users array\n        let index = event.target.name\n\n        // get the user we want to delete\n        let deletedUser = users[index]\n\n        // send the request to the server\n        deleteUser(deletedUser, token)\n            .then(result => {\n\n                // if one was deleted\n                if (result.deletedCount === 1) {\n\n                    //copy state\n                    let updatedUsers = [...users]\n\n                    //remove it from the tasks array\n                    // using our index we saved from before\n                    updatedUsers.splice(index, 1)\n\n                    //set the state\n                    setUsers(updatedUsers)\n                }\n            })\n\n    }\n\n    //#endregion\n\n    /*\n    Functions for our list of unclaimed tasks\n    */\n\n    //#region \n\n    // DELETE task\n    const onClickDeleteTask = (event) => {\n\n        let id = event.target.value\n\n        // remove task from the db and rerender\n        deleteTask(id)\n            .then(response => {\n\n                if (response.deletedCount === 1) {\n\n                    // copy our state\n                    let updateAllTasks = [...allTasks]\n\n                    let index\n\n                    // find the index of the task we want to remove\n                    for (let element of updateAllTasks) {\n                        if (element._id === id) {\n                            index = updateAllTasks.indexOf(element)\n                        }\n                    }\n\n                    // remove the task from the array\n                    updateAllTasks.splice(index, 1)\n\n                    // set state\n                    setAllTasks(updateAllTasks)\n                }\n\n            })\n            .catch(error => {\n                console.log(error)\n            })\n    }\n\n    //#endregion\n\n    /* What we render */\n    return (\n        <div>\n            Create New Account <br />\n            <div>\n                First Name:\n                <input type='text' name='firstName' onChange={onChangeHandler} value={firstName}></input><br />\n                    Last Name:\n                    <input type='text' name='lastName' onChange={onChangeHandler} value={lastName}></input><br />\n                    Email:\n                    <input type='email' name='email' onChange={onChangeHandler} value={email}></input><br />\n                    Password:\n                    <input type='password' name='password' onChange={onChangeHandler} value={password}></input><br />\n\n                <CheckBox checked={admin} onChange={() => { setAdmin(!admin) }} value={admin}></CheckBox> Admin <br />\n                {createButton()}\n            </div>\n\n            <div>\n                <br /><br />\n                <button onClick={() => { window.localStorage.removeItem(\"token\"); setToken(''); setLoggedIn(false); setTasks([]); setUser({}) }}>LOGOUT</button>\n                <RLink to='/tasks'>Tasks</RLink>\n                <button onClick={clearUserState}>CLEAR FORM</button>\n            </div>\n\n            <div style={{ float: 'left', textAlign: 'left' }}>\n                <h2>Users:</h2>\n                <ul>\n                    {\n                        users.map((value, index) => {\n\n                            return (\n                                <li key={value._id}>\n                                    {`${value._id} ||${value.firstName} || ${value.email} || ${value.admin ? \"Admin\" : \"Not admin\"} ||`}\n                                    <button onClick={onUserDeleteClick} name={index}>Delete</button>\n                                    <button onClick={onUserEditClick} name={index}>Edit</button>\n                                </li>\n                            )\n\n                        })\n                    }\n                </ul>\n                <h2>Tasks Without Users:</h2>\n                <ul>\n                    {\n                        // filter out tasks that the user\n                        // was deleted\n                        allTasks.filter( (task) => {\n                            let lostTask = true\n\n                            //look for the user id that\n                            //matches\n                            users.forEach((user) => {\n\n                                if (task.userId === user._id) {\n                                    lostTask = false\n                                }\n                            })\n\n                            //true if lost\n                            //false if not\n                            return lostTask\n\n                        }).map((value, index) => {\n\n                            return (\n                                <li key={index}>\n                                    {`${value.text} || ${value.userId}`}\n                                    <button onClick={onClickDeleteTask} value={value._id}>DELETE</button>\n                                </li>\n                            )\n\n                        })\n                    }\n                </ul>\n            </div>\n        </div>\n    );\n};\n\nexport default CreateUser;\n","import React from 'react'\n\n\n\nexport default function Title(props) {\n\n\n    return (\n        <div style={{ backgroundColor: \"lightblue\", padding: '10px' }}>\n            <h1>Task Manager</h1>\n        </div>\n    )\n}\n","import React, { useState } from 'react';\nimport Button from '@material-ui/core/Button'\nimport TextField from '@material-ui/core/TextField'\nimport Paper from '@material-ui/core/Paper'\nimport { createNewUserNoToken } from '../fetchUtils'\n\nfunction SignUp(props) {\n\n    const [state, setState] = useState({\n        firstName: '',\n        lastName: '',\n        email: '',\n        password: ''\n    })\n\n    const onChangeHandler = (event) => {\n\n        let newObj = { ...state }\n\n        switch (event.target.id) {\n            case \"firstName\":\n                newObj.firstName = event.target.value\n                break;\n            case \"lastName\":\n                newObj.lastName = event.target.value\n                break;\n            case \"email\":\n                newObj.email = event.target.value\n                break;\n            case \"password\":\n                newObj.password = event.target.value\n                break;\n            default:\n                break;\n        }\n\n        setState(newObj)\n    }\n\n    const onClickHandler = () => {\n\n        // look for any empty fields\n        // tell the user to fill out all\n        // fields if one is empty\n        for (let prop in state) {\n            if (state[prop] === '') {\n                alert(\"Please fill out all fields.\")\n                return null\n            }\n        }\n\n        //create the user object\n        let user = {\n            firstName: state.firstName,\n            lastName: state.lastName,\n            email: state.email,\n            password: state.password,\n            admin: false\n        }\n\n        console.log(user)\n\n        //if all are filled\n        //create a new user\n        createNewUserNoToken(user)\n        .then(result => {\n\n            alert(\"User Created!\")\n            \n            // send the user to the sign in page\n            props.history.push('/')\n        })\n        .catch(error => {\n            alert(\"Creation failed\")\n        })\n\n\n\n    }\n\n    return (\n        <div>\n            <Paper elevation={3} style={{ padding: 16, margin: '25%' }}>\n                <div>\n                    <TextField required\n                        id=\"firstName\"\n                        label=\"First Name\"\n                        value={state.firstName}\n                        onChange={onChangeHandler}\n                    />\n                </div>\n                <div>\n                    <TextField required\n                        id=\"lastName\"\n                        label=\"Last Name\"\n                        value={state.lastName}\n                        onChange={onChangeHandler}\n                    />\n                </div>\n                <div>\n                    <TextField required\n                        id=\"email\"\n                        label=\"Email\"\n                        value={state.email}\n                        onChange={onChangeHandler}\n                    />\n                </div>\n                <div>\n                    <TextField required\n                        id=\"password\"\n                        label=\"Password\"\n                        type='password'\n                        value={state.password}\n                        onChange={onChangeHandler}\n                    />\n                </div>\n                <br />\n                <Button variant='contained' color='primary' onClick={onClickHandler}>Sign Up!</Button>\n                <Button color='secondary' onClick={() => { props.history.push('/') }}>Cancel</Button>\n\n            </Paper>\n\n        </div>\n    );\n}\n\nexport default SignUp;","import React from 'react';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom'\nimport ListOfTasks from './ListOfTasks';\nimport SignIn from './SignIn';\nimport {AuthProvider} from './AuthContext'\nimport {TasksProvider} from './TasksContext'\nimport ProtectedRoute from './ProtectedRoute'\nimport CreateUser from './CreateUser'\nimport Title from './Title'\nimport SignUp from './SignUp';\n\nfunction MainRouter(props) {\n    return (\n        <div>\n            <Router>\n                <AuthProvider>\n                    <TasksProvider>\n                    <Title></Title>\n                    <Switch>\n                        <ProtectedRoute path='/tasks' component={ListOfTasks} />\n                        <ProtectedRoute path='/create-user' component={CreateUser} />\n                        <Route path='/signup' component={SignUp} />\n                        <Route path='/' component={SignIn} />\n                    </Switch>\n                    </TasksProvider>\n                </AuthProvider>\n            </Router>\n            \n        </div>\n    );\n}\n\nexport default MainRouter;","import React from 'react';\nimport './App.css';\nimport MainRouter from './components/MainRouter';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainRouter></MainRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","\nconst currentApi = \"/tasks\"\nconst userApi = \"/users\"\nconst JWT_KEY = 'abc123'\nconst DUMMY_DATA = [\n    {\n        date: (new Date()).toLocaleDateString(),\n        text: \"My first task\",\n        isComplete: false\n    },\n    {\n        date: (new Date()).toLocaleDateString(),\n        text: \"My second task should start completed\",\n        isComplete: true\n    }\n\n]\n\n//const uriBase = \"http://localhost:5001\"\n//const uriBase = \"https://sn-todo.herokuapp.com\"\n\n// here we switch our uriBase according to the node environment\nconst uriBase = process.env.NODE_ENV !== 'production' ? (\n    \"http://localhost:5001\"\n) : (\n    \"\" // this is blank because heroku adds the base for us\n)\n\n\n\nmodule.exports.uriBase = uriBase\nmodule.exports.currentApi = currentApi\nmodule.exports.userApi = userApi\nmodule.exports.JWT_KEY = JWT_KEY\nmodule.exports.DUMMY_DATA = DUMMY_DATA"],"sourceRoot":""}