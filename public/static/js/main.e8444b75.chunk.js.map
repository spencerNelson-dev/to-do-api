{"version":3,"sources":["components/Task.js","components/AddTask.js","components/ListOfTasks.js","components/Title.js","App.js","serviceWorker.js","index.js","const.js"],"names":["Task","props","React","useState","task","isComplete","setIsComplete","textDecorationLine","style","setStyle","checked","setChecked","updateLook","Checkbox","onChange","event","target","color","onClick","fetch","uriBase","currentApi","_id","method","headers","body","JSON","stringify","then","httpResult","ok","console","log","json","result","refresh","catch","error","Date","date","toLocaleDateString","text","IconButton","aria-label","removeTask","Error","response","fontSize","buttonText","isEdit","backgroundColor","padding","margin","type","setText","value","onClickAdd","listStyle","listStyleType","ListOfTasks","tasks","setTasks","useEffect","display","justifyContent","textAlign","map","index","key","alert","newTask","Title","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"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","file":"static/js/main.e8444b75.chunk.js","sourcesContent":["import React from 'react';\nimport {uriBase, currentApi} from '../const'\nimport Checkbox from '@material-ui/core/Checkbox';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport IconButton from '@material-ui/core/IconButton';\nimport EditIcon from '@material-ui/icons/Edit'\n\nexport default function Task(props) {\n    const [isComplete, setIsComplete] = React.useState(props.task.isComplete)\n    const [style, setStyle] = React.useState(isComplete ? {textDecorationLine: 'line-through'} : {} )\n    const [checked, setChecked] = React.useState(isComplete);\n\n    const updateLook = () => {\n\n        if(!isComplete){\n            setStyle({textDecorationLine: 'line-through'}) \n            setIsComplete(true)\n            setChecked(true)\n        } else {\n            setStyle({})\n            setIsComplete(false)\n            setChecked(false)\n        }\n\n    }\n\n    const onClickComplete = () => {\n\n        updateLook()\n\n        fetch(`${uriBase}${currentApi}/${props.task._id}`,{\n            method: \"PATCH\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\"isComplete\": !isComplete})\n            \n        })\n        .then(httpResult=> {\n            if(!httpResult.ok){\n                console.log(\"Did not patch\")\n            }\n\n            return httpResult.json()\n        })\n        .then(result => {\n\n            setIsComplete(result.isComplete)\n            props.refresh()\n        })\n        .catch(error => {\n            console.log(error)\n        })\n    }\n\n    const onClickDelete = () => {\n\n        let removeTask = props.task\n\n        fetch(`${uriBase}${currentApi}/${removeTask._id}`, {\n            method: \"DELETE\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            }\n        })\n        .then(httpResult => {\n            if (!httpResult.ok) {\n                throw new Error(\"Bad response\")\n            }\n\n            return httpResult.json()\n        })\n        .then(response => {\n\n           props.refresh()\n        })\n        .then( result => {\n            updateLook()\n        }\n        )\n        .catch(error => {\n            console.log(error)\n        })\n    }\n\n\n    return(\n        <div>\n        <div style={style}>\n            <Checkbox\n                checked={checked}\n                onChange={(event) => setChecked(event.target.checked)}\n                color=\"primary\"\n                onClick={onClickComplete}\n            />\n            {`${ new Date(props.task.date).toLocaleDateString()} | ${props.task.text} `}\n\n            {/* <IconButton aria-label=\"edit\" onClick={props.onClickEdit}>\n                <EditIcon fontSize='small'></EditIcon>\n            </IconButton> */}\n\n            <IconButton aria-label=\"delete\" onClick={onClickDelete}>\n            <DeleteIcon fontSize=\"small\" />\n            </IconButton>\n            \n        </div>\n        </div>\n    )\n}","import React from 'react';\n\nexport default function Task(props) {\n    \n    let buttonText\n\n    (props.isEdit) ? buttonText = \"Edit\" : buttonText = \"Add\"\n\n\n    const onChangeHandler = (event) => {\n\n        props.setText(event.target.value)\n    }\n\n    return(\n        <div style={{backgroundColor: \"lightblue\", padding: '10px'}}>\n            New Task:\n         <input style={{margin: '5px'}} type='text' onChange={onChangeHandler} value={props.text}></input>\n            <button onClick={props.onClickAdd}>{buttonText}</button>\n        </div>\n    )\n}","import React from 'react';\nimport Task from './Task'\nimport AddTask from './AddTask'\nimport { uriBase, currentApi } from '../const'\n\nconst DUMMY_DATA = [\n    {\n        date: (new Date()).toLocaleDateString(),\n        text: \"My first task\",\n        isComplete: false\n    },\n    {\n        date: (new Date()).toLocaleDateString(),\n        text: \"My second task should start completed\",\n        isComplete: true\n    }\n\n]\n\nconst listStyle = {\n\n    listStyleType: 'none',\n\n}\n\nexport default function ListOfTasks() {\n    const [tasks, setTasks] = React.useState([])\n\n    const [text, setText] = React.useState('')\n    //const [isEdit, setIsEdit] = React.useState(false)\n\n    const refresh = () => {\n\n        fetch(`${uriBase}${currentApi}`, {\n            method: 'GET',\n            headers: {\n                \"Content-Type\": \"application/json\",\n            }\n        })\n            .then(httpResult => {\n                if (!httpResult.ok) {\n                    throw new Error(\"Bad response\")\n                }\n\n                return httpResult.json()\n            })\n            .then(response => {\n\n                setTasks(response)\n            })\n            .catch(error => {\n\n                console.log(error)\n            })\n    }\n\n    const onClickAdd = (event) => {\n\n        // if the user hits the enter key\n        // if (event.keyCode === 13) {\n\n            // check to see if the task is empty\n            if (text === '') {\n\n                return (\n                    alert(\"Task cannot be empty\")\n                )\n            }\n            // TODO\n            // Check to see if the user is editing a task\n            // if not add a new task\n            // else edit the task they are editing\n\n                let newTask = {\n                    date: new Date(),\n                    text: text,\n                    isComplete: false\n                }\n\n                fetch(`${uriBase}${currentApi}`, {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                    },\n                    body: JSON.stringify(newTask)\n                })\n                    .then(httpResult => {\n                        if (!httpResult.ok) {\n                            throw new Error(\"Bad response\")\n                        }\n\n                        return httpResult.json()\n                    })\n                    .then(response => {\n\n                        refresh()\n                    })\n                    .catch(error => {\n                        console.log(error)\n                    })\n\n                //clear text field\n                setText('')\n            // }\n    }\n\n    // const onClickEdit = (task) => (event) => {\n\n    //     setText(task.text)\n    //     setIsEdit(true)\n    // }\n\n    React.useEffect(() => {\n\n        refresh()\n    }, [])\n\n    return (\n        <div>\n            <div style={{ display: 'flex', justifyContent: 'center' }} >\n                <ul style={{ textAlign: 'left' }}>\n                    {\n                        tasks.map((task, index) => {\n                            return (\n                                <li style={listStyle} key={index}>\n                                    <Task task={task} refresh={refresh} ></Task>\n                                </li>\n                            )\n                        })\n                    }\n                </ul>\n            </div>\n            <div>\n                <AddTask text={text} setText={setText}\n                    onClickAdd={onClickAdd}\n                    refresh={refresh} >\n                </AddTask>\n            </div>\n        </div>\n    )\n}","import React from 'react'\n\nexport default function Title () {\n\n    return (\n        <div style={{backgroundColor: \"lightblue\", padding: '10px'}}>\n            <h1>Task Manager</h1>\n        </div>\n    )\n}","import React from 'react';\nimport './App.css';\nimport ListOfTasks from './components/ListOfTasks'\nimport Title from './components/Title'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Title></Title>\n      <ListOfTasks></ListOfTasks>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","//const uriBase = \"http://localhost:5001\"\nconst uriBase = \"https://sn-todo.herokuapp.com\"\n\n\nconst currentApi = \"/tasks\"\n\nmodule.exports.uriBase = uriBase\nmodule.exports.currentApi = currentApi"],"sourceRoot":""}