{"version":3,"sources":["components/AuthContext.js","components/Title.js","components/Task.js","components/AddTask.js","components/DateList.js","components/ListOfTasks.js","jwtUtils.js","components/SignIn.js","components/ProtectedRoute.js","components/Test.js","components/MainRouter.js","App.js","serviceWorker.js","index.js","const.js"],"names":["AuthContext","React","createContext","AuthProvider","props","useState","loggedIn","setLoggedIn","token","setToken","Provider","value","children","AuthConsumer","Consumer","Title","style","backgroundColor","padding","Task","task","isComplete","setIsComplete","textDecorationLine","setStyle","checked","setChecked","updateLook","Grid","container","spacing","justify","alignItems","item","xs","Checkbox","onChange","event","target","color","onClick","fetch","uriBase","currentApi","_id","method","headers","body","JSON","stringify","then","httpResult","ok","console","log","json","result","refresh","catch","error","textAlign","text","IconButton","aria-label","setIsEdit","setText","setEditId","fontSize","removeTask","Error","response","onChangeHandler","keyCode","onClickAdd","height","isEdit","margin","width","type","onKeyUp","onClickEdit","DateList","listStyle","listStyleType","dateStyle","ListOfTasks","user","setUser","tasks","setTasks","editId","useContext","key","Promise","resolve","reject","jwt","verify","payload","verifyToken","JWT_KEY","useEffect","currentDate","Date","firstName","lastName","reduce","accumlator","currentValue","date","toLocaleDateString","push","map","index","alert","newTask","userId","SignIn","email","setEmail","password","setPassword","name","userApi","history","message","ProtectedRoute","Component","component","rest","render","to","Test","MainRouter","path","App","className","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","DUMMY_DATA","module","exports"],"mappings":"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","file":"static/js/main.9fd100d4.chunk.js","sourcesContent":["import React from 'react';\n\nconst AuthContext = React.createContext({})\n\nconst AuthProvider = (props) => {\n\n    const [loggedIn, setLoggedIn] = React.useState(false)\n    const [token, setToken] = React.useState('')\n\n    return (\n        <div>\n            <AuthContext.Provider value ={{loggedIn, setLoggedIn, token, setToken}}>\n                {props.children}\n            </AuthContext.Provider>\n        </div>\n    );\n};\n\nconst AuthConsumer = AuthContext.Consumer\nexport {AuthProvider, AuthConsumer, AuthContext}","import React, { useContext, useState, useEffect } from 'react'\nimport { AuthContext } from './AuthContext'\nimport {uriBase, userApi} from '../const'\n\n\n\nexport default function Title(props) {\n\n    return (\n        <div style={{ backgroundColor: \"lightblue\", padding: '10px' }}>\n            <h1>Task Manager</h1>\n        </div>\n    )\n}\n","import React from 'react';\nimport {uriBase, currentApi} from '../const'\nimport Checkbox from '@material-ui/core/Checkbox';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport IconButton from '@material-ui/core/IconButton';\nimport EditIcon from '@material-ui/icons/Edit'\nimport Grid from '@material-ui/core/Grid'\n\nexport default function Task(props) {\n    const [isComplete, setIsComplete] = React.useState(props.task.isComplete)\n    const [style, setStyle] = React.useState(isComplete ? {textDecorationLine: 'line-through'} : {} )\n    const [checked, setChecked] = React.useState(isComplete);\n\n    const updateLook = () => {\n\n        if(!isComplete){\n            setStyle({textDecorationLine: 'line-through'}) \n            setIsComplete(true)\n            setChecked(true)\n        } else {\n            setStyle({})\n            setIsComplete(false)\n            setChecked(false)\n        }\n\n    }\n\n    const onClickComplete = () => {\n\n        updateLook()\n\n        fetch(`${uriBase}${currentApi}/${props.task._id}`,{\n            method: \"PATCH\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\"isComplete\": !isComplete})\n            \n        })\n        .then(httpResult=> {\n            if(!httpResult.ok){\n                console.log(\"Did not patch\")\n            }\n\n            return httpResult.json()\n        })\n        .then(result => {\n\n            setIsComplete(result.isComplete)\n            props.refresh()\n        })\n        .catch(error => {\n            console.log(error)\n        })\n    }\n\n    const onClickDelete = () => {\n\n        let removeTask = props.task\n\n\n        fetch(`${uriBase}${currentApi}/${removeTask._id}`, {\n            method: \"DELETE\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            }\n        })\n        .then(httpResult => {\n            if (!httpResult.ok) {\n                throw new Error(\"Bad response\")\n            }\n\n            return httpResult.json()\n        })\n        .then(response => {\n\n           props.refresh()\n        })\n        .then( result => {\n            updateLook()\n        }\n        )\n        .catch(error => {\n            console.log(error)\n        })\n    }\n\n    const onClickEdit = () => {\n        props.setIsEdit(true)\n        props.setText(props.task.text)\n        props.setEditId(props.task._id)\n    }\n\n\n    return(\n        <div>\n        <div  >\n            <Grid container spacing={0} justify=\"center\" alignItems=\"baseline\">\n                <Grid item xs></Grid>\n                <Grid item xs>\n            <Checkbox\n                checked={checked}\n                onChange={(event) => setChecked(event.target.checked)}\n                color=\"primary\"\n                onClick={onClickComplete}\n            />\n            </Grid>\n            <Grid item xs>\n                <div style={{textAlign: 'center'}}>\n                <div style={style}>\n                    {`${props.task.text}`}\n                </div>\n                </div>\n            </Grid>\n            <Grid item xs>\n            <IconButton aria-label=\"edit\" onClick={onClickEdit}>\n                <EditIcon fontSize='small'></EditIcon>\n            </IconButton>\n\n            <IconButton aria-label=\"delete\" onClick={onClickDelete}>\n            <DeleteIcon fontSize=\"small\" />\n            </IconButton>\n            </Grid>\n            <Grid item xs></Grid>\n            </Grid>\n            \n        </div>\n        </div>\n    )\n}","import React from 'react';\n\nexport default function Task(props) {\n\n    const onChangeHandler = (event) => {\n\n        props.setText(event.target.value)\n\n        if(event.keyCode === 13){\n            props.onClickAdd(event)\n        }\n    }\n\n    const createButton = () => {\n\n        if(!props.isEdit){\n            return (\n                <button onClick={props.onClickAdd}>Add</button>\n            )\n        } else {\n            return (\n                <button onClick={props.onClickEdit}>Edit</button>\n            )\n        }\n\n    }\n\n    return(\n        <div style={{backgroundColor: \"lightblue\", padding: '10px', height: '50px'}}>\n            {props.isEdit ? \"Edit Task:\": \"New Task:\"}\n         <input style={{margin: '5px', height: '50%', width: '35%', fontSize: '16px'}} type='text' onChange={onChangeHandler} value={props.text} onKeyUp={onChangeHandler}></input>\n            {createButton()}\n        </div>\n    )\n}","import React from 'react';\nimport Task from './Task'\n\nfunction DateList(props) {\n    return (\n        <div>\n           <Task props={props}></Task>\n        </div>\n    );\n}\n\nexport default DateList;","import React from 'react';\nimport Task from './Task'\nimport AddTask from './AddTask'\nimport Title from './Title'\nimport DateList from './DateList'\nimport { uriBase, currentApi, JWT_KEY } from '../const'\nimport { AuthContext } from './AuthContext'\nimport { verifyToken } from '../jwtUtils'\n\n\nconst listStyle = {\n\n    listStyleType: 'none',\n}\n\nconst dateStyle = {\n\n    listStyleType: 'none',\n    backgroundColor: 'lightBlue'\n}\n\nexport default function ListOfTasks() {\n    const [user, setUser] = React.useState('')\n    const [tasks, setTasks] = React.useState([])\n    const [text, setText] = React.useState('')\n    const [isEdit, setIsEdit] = React.useState(false)\n    const [editId, setEditId] = React.useState('')\n\n    const { setLoggedIn, token } = React.useContext(AuthContext)\n\n    const refresh = () => {\n\n        // Verify Token\n        verifyToken(token, JWT_KEY)\n            .then(payload => {\n                return payload.user\n            })\n            .then(result => {\n                setUser(result)\n\n                // GET all the tasks\n                fetch(`${uriBase}${currentApi}/${result._id}`, {\n                    method: 'GET',\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                    }\n                })\n                    .then(httpResult => {\n                        if (!httpResult.ok) {\n                            throw new Error(\"Bad response\")\n                        }\n\n                        return httpResult.json()\n                    })\n                    .then(response => {\n\n                        setTasks(response)\n                    })\n                    .catch(error => {\n\n                        console.log(error)\n                    })\n\n            }) // end of verify token\n            .catch(error => {\n\n                console.log(error)\n            })\n    }\n\n    const onClickAdd = (event) => {\n\n        // check to see if the task is empty\n        if (text === '') {\n\n            return (\n                alert(\"Task cannot be empty\")\n            )\n        }\n\n        let newTask = {\n            date: new Date(),\n            text: text,\n            isComplete: false,\n            userId: user._id\n        }\n\n        fetch(`${uriBase}${currentApi}`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(newTask)\n        })\n            .then(httpResult => {\n                if (!httpResult.ok) {\n                    throw new Error(\"Bad response\")\n                }\n\n                return httpResult.json()\n            })\n            .then(response => {\n\n                refresh()\n            })\n            .catch(error => {\n                console.log(error)\n            })\n\n        //clear text field\n        setText('')\n    }\n\n    const onClickEdit = () => {\n\n        setIsEdit(false)\n\n        if (editId !== '') {\n\n            fetch(`${uriBase}${currentApi}/${editId}`, {\n                method: \"PATCH\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({ \"text\": text })\n            })\n                .then(httpResult => {\n                    if (!httpResult.ok) {\n                        throw new Error(\"Could not update with edit\")\n                    }\n\n                    return httpResult\n                })\n                .then(result => {\n\n                    refresh()\n                    setText('')\n                })\n                .catch(error => {\n                    console.log(error)\n                })\n        } else {\n            alert(\"Cannot Edit\")\n        }\n    }\n\n    React.useEffect(() => {\n\n        refresh()\n    }, [])\n\n    let currentDate = new Date(0)\n\n    return (\n        <div>\n            <h4>{`${user.firstName} ${user.lastName}'s Tasks:`}</h4>\n            <div >\n                <ul style={{padding: 0}}>\n                    {\n                        tasks.reduce((accumlator, currentValue) => {\n                            // here we reduce our tasks array, pulling out unique dates\n                            // and making them their own tasks\n                            // later with our map will will return the date\n                            // as its own li\n                            if(new Date(currentValue.date).toLocaleDateString() !==\n                               new Date(currentDate).toLocaleDateString())\n                            {\n                                currentDate = currentValue.date\n                                accumlator.push(currentDate)\n                                accumlator.push(currentValue)\n                            } else{\n                                accumlator.push(currentValue)\n                            }\n                            return accumlator\n\n                        },[]).map((task, index) => {\n\n                            return (\n\n                                task.text ? (\n                                <li style={listStyle} key={index}>\n                                    <Task task={task}\n                                        refresh={refresh}\n                                        setIsEdit={setIsEdit}\n                                        setText={setText}\n                                        setEditId={setEditId}></Task>\n                                </li>\n                                ) : (\n\n                                    <li style={dateStyle} key={index}>\n                                        {`***** ${ new Date(task).toLocaleDateString()} *****`}\n                                        </li>\n                                )\n                            )\n                        })\n                    }\n                </ul>\n            </div>\n            <div>\n                <AddTask text={text} setText={setText}\n                    onClickAdd={onClickAdd}\n                    refresh={refresh}\n                    isEdit={isEdit} setIsEdit={setIsEdit}\n                    onClickEdit={onClickEdit} >\n                </AddTask>\n            </div>\n            <button onClick={() => { setLoggedIn(false) }}>LOGOUT</button>\n        </div>\n    )\n}\n\n/* \n                <ul >\n                    {\n                        tasks.map((task, index) => {\n\n                            return (\n\n                                <li style={listStyle} key={index}>\n                                    <Task task={task}\n                                        refresh={refresh}\n                                        setIsEdit={setIsEdit}\n                                        setText={setText}\n                                        setEditId={setEditId}></Task>\n                                </li>\n                            )\n                        })\n                    }\n                </ul>\n*/","import jwt from 'jsonwebtoken'\n\nexport function verifyToken(token, key) {\n\n    return new Promise((resolve, reject) => {\n\n        jwt.verify(token, key, (error, payload) => {\n\n            if (error !== null) {\n                reject(error)\n            } else {\n                resolve(payload)\n            }\n        })\n    })\n}","import React, { useContext, useState } from 'react';\nimport { Link as RLink, Redirect } from 'react-router-dom'\nimport { AuthContext } from './AuthContext'\nimport { uriBase, userApi } from '../const'\nimport Title from './Title'\n\nfunction SignIn(props) {\n    //State\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n\n    //Context\n    const { loggedIn, setLoggedIn, setToken } = useContext(AuthContext)\n\n    const onChangeHandler = (event) => {\n\n        let name = event.target.name\n\n        switch (name) {\n            case 'email':\n                setEmail(event.target.value)\n                break;\n\n            case 'password':\n                setPassword(event.target.value)\n                break\n            default:\n                break;\n        }\n\n    }\n\n    const onClickHandler = () => {\n\n        let body = { email, password }\n\n        fetch(`${uriBase}${userApi}/login`, {\n            method: 'POST',\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(body)\n        })\n        .then(httpResult => {\n            if (!httpResult.ok) {\n                throw new Error(\"Could not get user\")\n            }\n            console.log(\"httpresult\")\n            return httpResult.json()\n        })\n        .then(result => {\n            if(result.token !== ''){\n                setLoggedIn(true)\n                setToken(result.token)\n            } \n            props.history.push('/tasks')\n        })\n        .catch(error => {\n            console.error(error.name, error.message)\n        })\n    }\n\n    return (\n        <div>\n            Email:\n            <input type='email' name=\"email\" onChange={onChangeHandler} value={email}></input><br />\n            Password:\n            <input type='password' name=\"password\" onChange={onChangeHandler} value={password}></input><br />\n            <button onClick={onClickHandler}>Log In</button><br />\n        </div>\n    );\n}\n\nexport default SignIn;","import React from 'react'\nimport {Route, Redirect} from 'react-router-dom'\nimport {AuthConsumer} from './AuthContext'\n\nexport default function ProtectedRoute ({component: Component, ...rest}) {\n\n    return (\n        <AuthConsumer>\n            {\n                ({loggedIn}) => (\n\n                    <Route\n                        render ={props => \n\n                            loggedIn ? <Component {...props} /> : <Redirect to='/'/>\n                        }\n                        {...rest}\n                    />\n                )\n            }\n        </AuthConsumer>\n    )\n\n}","import React from 'react';\n\nfunction Test(props) {\n    return (\n        <div>\n            This is protected\n        </div>\n    );\n}\n\nexport default Test;","import React from 'react';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom'\nimport ListOfTasks from './ListOfTasks';\nimport SignIn from './SignIn';\nimport {AuthProvider} from './AuthContext'\nimport ProtectedRoute from './ProtectedRoute'\nimport Test from './Test'\nimport Title from './Title'\n\nfunction MainRouter(props) {\n    return (\n        <div>\n            <Router>\n                <AuthProvider>\n                <Switch>\n                    <ProtectedRoute path='/protected' component={Test} />\n                    <ProtectedRoute path='/tasks' component={ListOfTasks} />\n                    <Route path='/' component={SignIn} />\n                </Switch>\n                </AuthProvider>\n            </Router>\n            \n        </div>\n    );\n}\n\nexport default MainRouter;","import React from 'react';\nimport './App.css';\nimport Title from './components/Title'\nimport MainRouter from './components/MainRouter';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Title></Title>\n      <MainRouter></MainRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","//const uriBase = \"http://localhost:5001\"\nconst uriBase = \"https://sn-todo.herokuapp.com\"\n\n\nconst currentApi = \"/tasks\"\nconst userApi = \"/users\"\nconst JWT_KEY = '12345'\nconst DUMMY_DATA = [\n    {\n        date: (new Date()).toLocaleDateString(),\n        text: \"My first task\",\n        isComplete: false\n    },\n    {\n        date: (new Date()).toLocaleDateString(),\n        text: \"My second task should start completed\",\n        isComplete: true\n    }\n\n]\n\nmodule.exports.uriBase = uriBase\nmodule.exports.currentApi = currentApi\nmodule.exports.userApi = userApi\nmodule.exports.JWT_KEY = JWT_KEY\nmodule.exports.DUMMY_DATA = DUMMY_DATA"],"sourceRoot":""}