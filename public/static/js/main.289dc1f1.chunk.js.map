{"version":3,"sources":["fetchUtils.js","jwtUtils.js","components/AuthContext.js","components/TasksContext.js","components/Task.js","components/AddTask.js","components/ListOfTasks.js","components/SignIn.js","components/ProtectedRoute.js","components/CreateUser.js","components/Title.js","components/SignUp.js","components/MainRouter.js","App.js","serviceWorker.js","index.js","const.js"],"names":["createNewUser","user","token","createObj","doc","fetch","uriBase","userApi","method","headers","body","JSON","stringify","then","httpResult","ok","Error","json","catch","error","console","log","createNewUserNoToken","a","jwt","sign","email","JWT_KEY","deleteUser","_id","updateUser","userId","updatedUser","updateTask","taskId","change","currentApi","deleteTask","verifyToken","key","Promise","resolve","reject","verify","payload","AuthContext","React","createContext","AuthProvider","props","useState","loggedIn","setLoggedIn","window","localStorage","getItem","setToken","admin","setAdmin","setUser","useEffect","obj","prop","hasOwnProperty","isEmpty","result","removeItem","Provider","value","children","AuthConsumer","Consumer","TasksContext","TasksProvider","tasks","setTasks","useContext","length","getTasksByUserId","Task","task","isComplete","setIsComplete","textDecorationLine","extDecorationLine","style","setStyle","checked","setChecked","updateLook","Grid","container","spacing","justify","alignItems","item","xs","Checkbox","onChange","event","target","color","onClick","response","n","updatedArr","element","complete","textAlign","text","IconButton","aria-label","setIsEdit","setText","setEditId","fontSize","removeTask","index","indexOf","splice","onChangeHandler","keyCode","onClickAdd","backgroundColor","padding","height","isEdit","margin","width","type","onKeyUp","onClickEdit","listStyle","listStyleType","dateStyle","ListOfTasks","editId","currentDate","Date","firstName","lastName","reduce","displayArr","currentTask","date","toLocaleDateString","push","map","tasksToDisplayArray","alert","newTask","createNewTask","updatedArray","updatedTasks","history","SignIn","setEmail","password","setPassword","name","parsed","queryString","parseUrl","location","href","query","setItem","localToken","Button","message","component","RLink","to","src","alt","ProtectedRoute","Component","rest","render","CreateUser","users","setUsers","setFirstName","setLastName","clearUserState","newUser","refresh","onUserEditClick","onUserDeleteClick","onClickDelete","getAllUsers","getAllTasks","float","filter","foundTask","forEach","Title","SignUp","state","setState","newObj","id","Paper","elevation","TextField","required","label","variant","MainRouter","path","App","className","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","DUMMY_DATA","module","exports"],"mappings":"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","file":"static/js/main.289dc1f1.chunk.js","sourcesContent":["import { uriBase, currentApi, userApi, JWT_KEY } from './const'\nimport jwt from 'jsonwebtoken'\n\n/*\nThis file contains all the fetch requests used in our react app\n*/\n\n// GET all the tasks by user id\nexport const getTasksByUserId = (user) => {\n\n    return fetch(`${uriBase}${currentApi}/${user._id}`, {\n        method: 'GET',\n        headers: {\n            \"Content-Type\": \"application/json\",\n        }\n    })\n        .then(httpResult => {\n            if (!httpResult.ok) {\n                throw new Error(\"Bad response\")\n            }\n\n            return httpResult.json()\n        })\n        .catch(error => {\n\n            console.log(error)\n        })\n}\n\n// GET all users\nexport const getAllUsers = (token) => {\n\n    return fetch(`${uriBase}${userApi}`, {\n        method: 'GET',\n        headers: {\n            \"Authorization\": `Bearer ${token}`,\n            \"Content-Type\": \"application/json\"\n        }\n    })\n    .then(httpResult => {\n        if(!httpResult.ok){\n            throw new Error(\"Bad response\")\n        }\n\n        return httpResult.json()\n    })\n    .catch(error => {\n        console.log(error)\n    })\n}\n\nexport const getAllTasks = (token) => {\n\n    return fetch(`${uriBase}${currentApi}`, {\n        method: 'GET',\n        headers: {\n            \"Authorization\": `Bearer ${token}`,\n            \"Content-Type\": \"application/json\"\n        }\n    })\n    .then(httpResult => {\n        if(!httpResult.ok){\n            throw new Error(\"Bad response\")\n        }\n        \n        return httpResult.json()\n    })\n    .then(result => {\n        console.log(\"get tasks\", result)\n\n        return result\n    })\n    .catch(error => {\n        console.log(error)\n    })\n}\n\n// POST - create new user\nexport const createNewUser = (user, token) => {\n\n    let createObj = {}\n    createObj.doc = user\n\n    return fetch(`${uriBase}${userApi}/create`,{ \n        method: \"POST\",\n        headers: {\n            \"Authorization\": `Bearer ${token}`,\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(createObj)\n    })\n    .then(httpResult => {\n        if(!httpResult.ok){\n            throw new Error(\"CreateNewUser Failed\")\n        }\n\n        return httpResult.json()\n    })\n    .catch(error => {\n        console.log(error)\n    })\n}\nexport const createNewUserNoToken = async (user) => {\n\n    //make a token\n    let token = await jwt.sign({email:\"spencernelson144@gmail.com\"}, JWT_KEY)\n\n    let createObj = {}\n    createObj.doc = user\n\n    return fetch(`${uriBase}${userApi}/create`,{ \n        method: \"POST\",\n        headers: {\n            \"Authorization\": `Bearer ${token}`,\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(createObj)\n    })\n    .then(httpResult => {\n        if(!httpResult.ok){\n            throw new Error(\"CreateNewUser Failed\")\n        }\n\n        return httpResult.json()\n    })\n    .catch(error => {\n        console.log(error)\n    })\n}\n\n// delete user\nexport const deleteUser = (user, token) => {\n\n    return fetch(`${uriBase}${userApi}/delete/${user._id}`,{\n        method: \"DELETE\",\n        headers: {\n            \"Authorization\": `Bearer ${token}`,\n            \"Content-Type\": \"application/json\"\n        }\n    })\n    .then(httpResult => {\n        if (!httpResult.ok) {\n            throw new Error(\"Bad response\")\n        }\n\n        return httpResult.json()\n    })\n}\n\n// POST - Create new task given a task object\nexport const createNewTask = (newTask) => {\n\n    return fetch(`${uriBase}${currentApi}`, {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(newTask)\n    })\n        .then(httpResult => {\n            if (!httpResult.ok) {\n                throw new Error(\"Bad response\")\n            }\n\n            return httpResult.json()\n        })\n        .catch(error => {\n            console.log(error)\n        })\n}\n\n// PATCH - update user\nexport const updateUser = (userId,updatedUser, token) => {\n\n    return fetch(`${uriBase}${userApi}/update/${userId}`, {\n        method: \"PATCH\",\n        headers: {\n            \"Authorization\": `Bearer ${token}`,\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(updatedUser)\n\n    })\n    .then(httpResult => {\n        if(!httpResult.ok){\n            throw new Error(\"Could not update user\")\n        }\n\n        return httpResult.json()\n    })\n    .catch(error => {\n        console.log(error)\n    })\n}\n\n// PATCH - update task given task id and what to change\n// currently only the text and isComplete fields can be changed\nexport const updateTask = (taskId, change) => {\n\n    let body = {}\n\n    if(typeof change == typeof true){\n\n        body = {\"isComplete\": !change}\n    }\n    else if (typeof change == typeof ''){\n        \n        body = {\"text\": change}\n    }\n\n    return fetch(`${uriBase}${currentApi}/${taskId}`, {\n        method: \"PATCH\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(body)\n    })\n        .then(httpResult => {\n            if (!httpResult.ok) {\n                throw new Error(\"Could not update with edit\")\n            }\n\n            return httpResult.json()\n        })\n        .catch(error => {\n            console.log(error)\n        })\n}\n\n// DELETE - delete a task given a task id\nexport const deleteTask = (taskId) => {\n\n    return fetch(`${uriBase}${currentApi}/${taskId}`, {\n        method: \"DELETE\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n        }\n    })\n    .then(httpResult => {\n        if (!httpResult.ok) {\n            throw new Error(\"Bad response\")\n        }\n\n        return httpResult.json()\n    })\n}\n\n","import jwt from 'jsonwebtoken'\n\nexport function verifyToken(token, key) {\n\n    return new Promise((resolve, reject) => {\n\n        jwt.verify(token, key, (error, payload) => {\n\n            if (error !== null) {\n                reject(error)\n            } else {\n                resolve(payload)\n            }\n        })\n\n    })\n    .catch(error => {\n        console.log(error)\n    })\n}","import React from 'react';\nimport { verifyToken } from '../jwtUtils';\nimport { JWT_KEY } from '../const';\n\nconst AuthContext = React.createContext({})\n\nconst AuthProvider = (props) => {\n\n    const [loggedIn, setLoggedIn] = React.useState(false)\n    const [token, setToken] = React.useState(window.localStorage.getItem('token'))\n    const [admin, setAdmin] = React.useState(false)\n    const [user, setUser] = React.useState({})\n\n    // helper function to check if an object is empty\n    const isEmpty = (obj) => {\n        for (let prop in obj) {\n            if (obj.hasOwnProperty(prop))\n                return false\n        }\n        return true\n    }\n\n\n    React.useEffect(() => {\n\n        //if user is empty\n        if (isEmpty(user)) {\n\n            // if there is a token set\n            if (token) {\n\n                // verify the token\n                // set user state\n                verifyToken(token, JWT_KEY)\n                    .then(result => {\n                        setUser(result.user)\n                        console.log(\"AuthContext user\", result)\n                    })\n                    .catch(error => {\n                        //if something goes wrong with verifying\n                        //the token, clear the tokens\n                        setToken('')\n                        window.localStorage.removeItem('token')\n                        console.log(\"AuthContext\", error)\n                    })\n            }\n        }\n\n    }, [token, user])\n\n\n    return (\n        <div>\n            <AuthContext.Provider value={\n                { loggedIn, setLoggedIn, token, setToken, admin, setAdmin, user, setUser }\n            }>\n                {props.children}\n            </AuthContext.Provider>\n        </div>\n    );\n};\n\nconst AuthConsumer = AuthContext.Consumer\nexport { AuthProvider, AuthConsumer, AuthContext }","import React, { useState, useContext, useEffect } from 'react';\nimport { AuthContext } from './AuthContext';\nimport { getTasksByUserId } from '../fetchUtils'\n\nconst TasksContext = React.createContext({})\n\nconst TasksProvider = (props) => {\n\n    // set our state:\n    // we want our components to see what\n    // tasks are available\n    const [tasks, setTasks] = useState([])\n\n    // we will need our token to get our user\n    // and know which tasks to get\n    const { user } = useContext(AuthContext)\n\n    // the first time our app loads we want to\n    // send a request to our server for the \n    // list of tasks, but we don't want to call\n    // the server each time we update our state\n    useEffect(() => {\n\n        // if tasks have not been loaded\n        // from database\n        if (tasks.length === 0) {\n\n            //get tasks by user\n            getTasksByUserId(user)\n            .then(result => {\n                setTasks(result)\n            })\n        }\n    }, [tasks.length, user])\n\n    return (\n        <div>\n            <TasksContext.Provider value={{ tasks, setTasks }}>\n                {props.children}\n            </TasksContext.Provider>\n        </div>\n    );\n};\n\nconst TasksConsumer = TasksContext.Consumer\nexport { TasksProvider, TasksConsumer, TasksContext }","import React from 'react';\nimport { updateTask, deleteTask } from '../fetchUtils'\nimport Checkbox from '@material-ui/core/Checkbox';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport IconButton from '@material-ui/core/IconButton';\nimport EditIcon from '@material-ui/icons/Edit'\nimport Grid from '@material-ui/core/Grid'\nimport { TasksContext } from './TasksContext'\n\nexport default function Task(props) {\n    const [isComplete, setIsComplete] = React.useState(props.task.isComplete)\n    const [style, setStyle] = React.useState(isComplete ? { textDecorationLine: 'line-through' } : {extDecorationLine: 'none'})\n    const [checked, setChecked] = React.useState(isComplete);\n\n    const { tasks, setTasks } = React.useContext(TasksContext)\n\n    const updateLook = () => {\n\n        if (!isComplete) {\n            setStyle({ textDecorationLine: 'line-through' })\n            setIsComplete(true)\n            setChecked(true)\n        } else {\n            setStyle({ textDecorationLine: 'none' })\n            setIsComplete(false)\n            setChecked(false)\n        }\n\n    }\n\n    const onClickComplete = () => {\n\n        // update task with id and new isComplete\n        updateTask(props.task._id, isComplete)\n            .then(response => {\n\n                //if the response tells us that\n                //one item was changed\n                if (response.n === 1) {\n\n                    // copy state\n                    let updatedArr = [...tasks]\n\n\n                    // find the indexOf the deleted task\n                    for (let element of updatedArr) {\n\n                        if (element._id === props.task._id) {\n\n                            //update the completed prop\n                            // by just switching boolean\n                            element.complete = !element.complete\n                        }\n                    }\n\n                    //set the state\n                    setTasks(updatedArr)\n                    updateLook()\n                }\n            })\n            .catch(error => {\n                console.log(error)\n            })\n    }\n\n    const onClickDelete = () => {\n\n        // the task we are deleting\n        // we want to save a copy in\n        // memory\n        let removeTask = props.task\n\n        // remove task from the db and\n        // update the tasks array\n        deleteTask(removeTask._id)\n            .then(response => {\n\n                //if the response tells us that\n                //one item was deleted\n                if (response.n === 1) {\n\n                    // copy state\n                    let updatedArr = [...tasks]\n\n                    let index\n\n                    // find the indexOf the deleted task\n                    for (let element of tasks) {\n\n                        if (element._id === removeTask._id) {\n                            index = tasks.indexOf(element)\n                        }\n                    }\n\n                    //remove it from the tasks array\n                    updatedArr.splice(index, 1)\n\n                    //set the state\n                    setTasks(updatedArr)\n                    updateLook()\n                }\n\n            })\n            .catch(error => {\n                console.log(error)\n            })\n    }\n\n    const onClickEdit = () => {\n        props.setIsEdit(true)\n        props.setText(props.task.text)\n        props.setEditId(props.task._id)\n    }\n\n\n    return (\n        <div>\n            <div  >\n                <Grid container spacing={0} justify=\"center\" alignItems=\"baseline\">\n                    <Grid item xs></Grid>\n                    <Grid item xs>\n                        <Checkbox\n                            checked={checked}\n                            onChange={(event) => setChecked(event.target.checked)}\n                            color=\"primary\"\n                            onClick={onClickComplete}\n                        />\n                    </Grid>\n                    <Grid item xs>\n                        <div style={{ textAlign: 'center' }}>\n                            <div style={style}>\n                                {`${props.task.text}`}\n                            </div>\n                        </div>\n                    </Grid>\n                    <Grid item xs>\n                        <IconButton aria-label=\"edit\" onClick={onClickEdit}>\n                            <EditIcon fontSize='small'></EditIcon>\n                        </IconButton>\n\n                        <IconButton aria-label=\"delete\" onClick={onClickDelete}>\n                            <DeleteIcon fontSize=\"small\" />\n                        </IconButton>\n                    </Grid>\n                    <Grid item xs></Grid>\n                </Grid>\n\n            </div>\n        </div>\n    )\n}","import React from 'react';\n\nexport default function Task(props) {\n\n    const onChangeHandler = (event) => {\n\n        props.setText(event.target.value)\n\n        if(event.keyCode === 13){\n            props.onClickAdd(event)\n        }\n    }\n\n    const createButton = () => {\n\n        if(!props.isEdit){\n            return (\n                <button onClick={props.onClickAdd}>Add</button>\n            )\n        } else {\n            return (\n                <button onClick={props.onClickEdit}>Edit</button>\n            )\n        }\n\n    }\n\n    return(\n        <div style={{backgroundColor: \"lightblue\", padding: '10px', height: '50px'}}>\n            {props.isEdit ? \"Edit Task:\": \"New Task:\"}\n         <input style={{margin: '5px', height: '50%', width: '35%', fontSize: '16px'}}\n          type='text' onChange={onChangeHandler} value={props.text} onKeyUp={onChangeHandler}>\n          </input>\n            {createButton()}\n        </div>\n    )\n}","import React from 'react';\nimport Task from './Task'\nimport AddTask from './AddTask'\nimport { AuthContext } from './AuthContext'\nimport { TasksContext } from './TasksContext'\nimport { createNewTask, updateTask} from '../fetchUtils'\n\n//const ls = require('local-storage')\n\n\nconst listStyle = {\n\n    listStyleType: 'none',\n}\n\nconst dateStyle = {\n\n    listStyleType: 'none',\n    backgroundColor: 'lightBlue'\n}\n\nexport default function ListOfTasks(props) {\n    //const [user, setUser] = React.useState('')\n   // const [tasks, setTasks] = React.useState([])\n    const [text, setText] = React.useState('')\n    const [isEdit, setIsEdit] = React.useState(false)\n    const [editId, setEditId] = React.useState('')\n\n    const { setLoggedIn, user, } = React.useContext(AuthContext)\n\n    const {tasks, setTasks} = React.useContext(TasksContext)\n\n    const onClickAdd = (event) => {\n\n        // check to see if the task is empty\n        // if it is, send an alert\n        if (text === '') {\n\n            return (\n                alert(\"Task cannot be empty\")\n            )\n        }\n\n        // construct the new task object\n        let newTask = {\n            date: new Date(),\n            text: text,\n            isComplete: false,\n            userId: user._id\n        }\n\n        // add the object to the database and refresh\n        createNewTask(newTask)\n        .then(result => {\n\n            // copy our current tasks state\n            let updatedArray = [...tasks]\n\n            //push our added task\n            updatedArray.push(result)\n\n            //set our state\n            setTasks(updatedArray)\n        })\n\n        //clear text field\n        setText('')\n    }\n\n    const onClickEdit = () => {\n\n        // return the view to the add task\n        // state\n        setIsEdit(false)\n\n        if (editId !== '') {\n\n            // update task in db\n            updateTask(editId, text)\n                .then(result => {\n\n                    // copy the state\n                    let updatedTasks = [...tasks]\n\n                    // look for the element with the\n                    // id that was edited\n                    // and change the text\n                    for(let element of tasks){\n                        if(element._id === editId){\n                            element.text = text\n                        }\n                    }\n\n                    // set state with updated tasks\n                    setTasks(updatedTasks)\n\n                    // clear the textbox\n                    setText('')\n\n                })\n                .catch(error => {\n                    console.log(error)\n                })\n        } else {\n            alert(\"Cannot Edit\")\n        }\n    }\n\n    const tasksToDisplayArray = (tasks) => {\n        // here we reduce our tasks array, pulling out unique dates\n        // and making them their own items in the display array\n        // later with our map we will return the date\n        // as its own <li>\n\n        return tasks.reduce((displayArr, currentTask) => {\n\n            // if the date is not the previous date\n            if (new Date(currentTask.date).toLocaleDateString() !==\n                new Date(currentDate).toLocaleDateString()) {\n\n                // store the current date\n                currentDate = currentTask.date\n\n                // push the date and then push the task\n                displayArr.push(currentDate)\n                displayArr.push(currentTask)\n            } else {\n                // if the date is the same as the previous task\n                // then just push the task\n                displayArr.push(currentTask)\n            }\n\n            return displayArr\n\n        }, []) // end of reduce()\n        .map((task, index) => {\n            // This map function will translate our\n            // display array to li items\n\n            return (\n\n                // if the text exists then we know that the\n                // item is not just a date and we will display\n                // all the task information\n                task.text ? (\n                    <li style={listStyle} key={index}>\n                        <Task task={task}\n                            setIsEdit={setIsEdit}\n                            setText={setText}\n                            setEditId={setEditId}></Task>\n                    </li>\n                    // if the item has no text property then\n                    // we will just display the date.\n                ) : (\n                        <li style={dateStyle} key={index}>\n                            {`***** ${new Date(task).toLocaleDateString()} *****`}\n                        </li>\n                    )\n            )\n        }) // end of map()\n    } // end of tasksToDisplayArr()\n\n    let currentDate = new Date()\n\n    return (\n        <div>\n            <h4>{`${user.firstName} ${user.lastName}'s Tasks:`}</h4>\n\n            <div >\n                <ul style={{ padding: 0 }}>\n                    {\n                        tasksToDisplayArray(tasks)\n                    }\n                </ul>\n            </div>\n\n            <div>\n                <AddTask text={text} setText={setText}\n                    onClickAdd={onClickAdd}\n                    isEdit={isEdit} setIsEdit={setIsEdit}\n                    onClickEdit={onClickEdit} >\n                </AddTask>\n            </div>\n\n            <button onClick={() => { window.localStorage.removeItem(\"token\"); setLoggedIn(false) }}>LOGOUT</button>\n            <br/><br/>\n            <div>\n                {\n                    user.admin ? (\n                        <button onClick={() => { props.history.push('/create-user')}}>Admin Page</button>\n                    ) : (null)\n                }\n            </div>\n            \n            \n        </div>\n    )\n}","import React, { useContext, useState, useEffect } from 'react';\nimport { AuthContext } from './AuthContext'\nimport { uriBase, userApi } from '../const'\nimport queryString from 'query-string'\nimport { Link as RLink } from 'react-router-dom'\nimport Button from '@material-ui/core/Button'\n\n//const ls = require('local-storage')\n\nfunction SignIn(props) {\n    //State\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n\n    //Context\n    const { loggedIn, setLoggedIn, setToken } = useContext(AuthContext)\n\n    const onChangeHandler = (event) => {\n\n        let name = event.target.name\n\n        switch (name) {\n            case 'email':\n                setEmail(event.target.value)\n                break;\n\n            case 'password':\n                setPassword(event.target.value)\n                break\n            default:\n                break;\n        }\n\n    }\n\n    // email password sign in\n    const onClickHandlerLogIn = () => {\n\n        let body = { email, password }\n\n        // Post the email and password to the api\n        // if an email is found and it matches the\n        // password, it will return a json web token\n        fetch(`${uriBase}${userApi}/login`, {\n            method: 'POST',\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(body)\n        })\n            .then(httpResult => {\n                if (!httpResult.ok) {\n                    throw new Error(\"Could not get user\")\n                }\n                return httpResult.json()\n            })\n            .then(result => {\n\n                // if a token was returned\n                if (result.token !== '') {\n\n                    setLoggedIn(true)\n                    setToken(result.token)\n                    window.localStorage.setItem(\"token\", result.token)\n                }\n                props.history.push('/tasks')\n            })\n            .catch(error => {\n                console.error(error.name, error.message)\n            })\n    }\n\n    // oauth sign in and token sign in\n    // we only want to run this once,\n    // when to app first loads\n    useEffect((parsed) => {\n\n        // we look at the href on the window to see if a\n        // token is there\n        // if the user logged in through google or facebook\n        // it would appear there\n        parsed = queryString.parseUrl(window.location.href)\n\n        //if the token is there\n        if (parsed.query.token) {\n\n            // we log the user in and\n            // write the token to local storage\n            setLoggedIn(true)\n            setToken(parsed.query.token)\n            window.localStorage.setItem(\"token\", parsed.query.token)\n            props.history.push('/tasks')\n        }\n\n\n        // either way we we then look at the local\n        // storage to see if there is already a token\n        let localToken = window.localStorage.getItem(\"token\")\n\n        // if the token there we will log the user in\n        // and set our state\n        if (localToken) {\n            setLoggedIn(true)\n            setToken(localToken)\n        }\n\n    }, [])\n\n    return (\n        <div>\n            Email:\n            <input type='email' name=\"email\" onChange={onChangeHandler} value={email}></input><br />\n            Password:\n            <input type='password' name=\"password\" onChange={onChangeHandler} value={password}></input><br />\n            <Button onClick={onClickHandlerLogIn}>Log In</Button>\n            <Button component={RLink} to='/signup'>Sign Up!</Button>\n            <br /><br />\n\n            <a href={`${uriBase}${userApi}/auth/google/login`}>\n                <img src={`${uriBase}/img/google_login.png`} alt='Google Login' height='45' width='190'></img>\n            </a>\n            <br /><br />\n            <a href={`${uriBase}${userApi}/auth/facebook/login`}>\n                <img src={`${uriBase}/img/facebook_login.png`} alt='Facebook Login' height='45' width='190'></img>\n                </a><br /><br />\n\n                {\n                    loggedIn ? <RLink to='/tasks'>To Tasks</RLink> : null\n                }\n\n            <br /><br /><br />\n            <br />\n\n            <a href=\"https://www.termsfeed.com/privacy-policy/8f4f66fa4c830b22fc9a54a9b3601b26\">Privacy Policy</a>\n        </div>\n    );\n}\n\nexport default SignIn;","import React from 'react'\nimport {Route, Redirect} from 'react-router-dom'\nimport {AuthConsumer} from './AuthContext'\n\nexport default function ProtectedRoute ({component: Component, ...rest}) {\n\n    return (\n        <AuthConsumer>\n            {\n                ({loggedIn}) => (\n\n                    <Route\n                        render ={props => \n\n                            loggedIn ? <Component {...props} /> : <Redirect to='/'/>\n                        }\n                        {...rest}\n                    />\n                )\n            }\n        </AuthConsumer>\n    )\n\n}","import React, { useState, useEffect } from 'react';\nimport { AuthContext } from './AuthContext'\nimport {getAllUsers, createNewUser, deleteUser, updateUser, getAllTasks, deleteTask} from '../fetchUtils'\nimport {Link as RLink} from 'react-router-dom'\nimport {verifyToken} from '../jwtUtils'\nimport {JWT_KEY} from '../const'\n\nimport CheckBox from '@material-ui/core/Checkbox'\n\nconst CreateUser = (props) => {\n\n    // state\n    const [users, setUsers] = useState([])\n    const [tasks, setTasks] = useState([])\n    const [firstName, setFirstName] = useState('')\n    const [lastName, setLastName] = useState('')\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n    const [admin, setAdmin] = useState(false)\n    const [isEdit, setIsEdit] = React.useState(false)\n    const [editId, setEditId] = React.useState('')\n\n\n    // context\n    const { setToken, token } = React.useContext(AuthContext)\n\n    //clears all the textfields\n    const clearUserState = () => {\n        setFirstName('')\n        setLastName('')\n        setEmail('')\n        setPassword('')\n        setAdmin(false)\n        setIsEdit(false)\n        setEditId('')\n    }\n\n    const changeCheckBox = () => {\n        setAdmin(!admin)\n    }\n\n    const onChangeHandler = (event) => {\n\n        let name = event.target.name\n        let value = event.target.value\n\n        switch (name) {\n            case 'firstName':\n                setFirstName(value)\n                break;\n            case 'lastName':\n                setLastName(value)\n                break\n            case 'email':\n                setEmail(value)\n                break\n            case 'password':\n                setPassword(value)\n                break\n            default:\n                break;\n        }\n\n    }\n\n    const onClickAdd = async () => {\n\n        let newUser = {\n            firstName,\n            lastName,\n            email,\n            password,\n            admin\n        }\n\n        await createNewUser(newUser, token)\n\n        clearUserState()\n        refresh()\n    }\n\n    const onClickEdit = async (event) => {\n\n        let updatedUser = {\n            firstName,\n            lastName,\n            email,\n            password,\n            admin\n        }\n\n        await updateUser(editId, updatedUser, token)\n\n        clearUserState()\n        refresh()\n    }\n\n    const onUserEditClick = (event) => {\n\n        let index = event.target.name\n\n        let user = users[index]\n\n        setFirstName(user.firstName)\n        setLastName(user.lastName)\n        setEmail(user.email)\n        setAdmin(user.admin)\n        setPassword(user.password)\n\n        setIsEdit(true)\n        setEditId(user._id)\n\n    }\n\n    const onUserDeleteClick = async (event) => {\n\n        let index = event.target.name\n\n        let user = users[index]\n\n        await deleteUser(user, token)\n\n        clearUserState()\n        refresh()\n    }\n\n    const onClickDelete = (event) => {\n\n        console.log(event.target.value)\n\n        // remove task from the db and rerender\n        deleteTask(event.target.value)\n        .then(response => {\n\n           refresh()\n        })\n        .catch(error => {\n            console.log(error)\n        })\n    }\n\n    const refresh = () => {\n\n        verifyToken(token, JWT_KEY)\n        .then(payload => {\n            \n            if(payload.user.admin){\n                getAllUsers(token)\n                .then(users => {\n                    \n                    setUsers(users)\n                })\n\n                getAllTasks(token)\n                .then(tasks => {\n\n                    setTasks(tasks || [])\n                })\n            } else{\n                props.history.push('/')\n            }\n        })\n        .catch(error => {\n            console.log(error)\n            props.history.push('/')\n        })\n    }\n\n    useEffect( () => {\n\n        refresh()\n    }, [])\n\n    const createButton = () => {\n\n        if(!isEdit){\n            return (\n                <button onClick={onClickAdd}>Add New</button>\n            )\n        } else {\n            return (\n                <button onClick={onClickEdit}>Edit</button>\n            )\n        }\n\n    }\n\n    return (\n        <div>\n            Create New Account <br/>\n            <div>\n                    First Name:\n                    <input type='text' name='firstName' onChange={onChangeHandler} value={firstName}></input><br />\n                    Last Name:\n                    <input type='text' name='lastName' onChange={onChangeHandler} value={lastName}></input><br />\n                    Email:\n                    <input type='email' name='email' onChange={onChangeHandler} value={email}></input><br/>\n                    Password:\n                    <input type='password' name='password' onChange={onChangeHandler} value={password}></input><br/>\n\n                    <CheckBox checked={admin} onChange={changeCheckBox} value={admin}></CheckBox> Admin <br/>\n                    {createButton()}        \n            </div>\n\n            <div>\n                <br/><br/>\n            <button onClick={() => { window.localStorage.removeItem(\"token\"); setToken('') }}>LOGOUT</button>\n            <RLink to='/tasks'>Tasks</RLink>\n            <button onClick={refresh}>Refresh</button>\n            <button onClick={clearUserState}>CLEAR FORM</button>\n            </div>\n\n            <div style={{float: 'left', textAlign: 'left'}}>\n                <h2>Users:</h2>\n                <ul>\n                    {\n                        users.map( (value, index) => {\n\n                            return(\n                                <li key={value._id}>\n                                    {`${value.firstName} || ${value.email} || ${value.admin ? \"Admin\" : \"Not admin\"} ||`}\n                                    <button onClick={onUserDeleteClick} name={index}>Delete</button>\n                                    <button onClick={onUserEditClick} name={index}>Edit</button>\n                                </li>\n                            )\n                            \n                        })\n                    }\n                </ul>\n                <h2>Tasks Without Users:</h2>\n                <ul>\n                    {\n                        tasks.filter((task) => {\n                            let foundTask = false\n\n                            users.forEach((user) => {\n\n                                if(task.userId === user._id){\n                                    foundTask = true\n                                }\n                            })\n\n                            if(!foundTask){\n                                return task\n                            }\n                        }).map( (value, index) => {\n\n                            return (\n                                <li key={index}>\n                                    {`${value.text} || ${value.userId}`}\n                                    <button onClick={onClickDelete} value={value._id}>DELETE</button>\n                                </li>\n                            )\n\n                        })\n                    }\n                </ul>\n            </div>\n        </div>\n    );\n};\n\nexport default CreateUser;\n","import React from 'react'\n\n\n\nexport default function Title(props) {\n\n\n    return (\n        <div style={{ backgroundColor: \"lightblue\", padding: '10px' }}>\n            <h1>Task Manager</h1>\n        </div>\n    )\n}\n","import React, { useState } from 'react';\nimport Button from '@material-ui/core/Button'\nimport TextField from '@material-ui/core/TextField'\nimport Paper from '@material-ui/core/Paper'\nimport { createNewUserNoToken } from '../fetchUtils'\n\nfunction SignUp(props) {\n\n    const [state, setState] = useState({\n        firstName: '',\n        lastName: '',\n        email: '',\n        password: ''\n    })\n\n    const onChangeHandler = (event) => {\n\n        let newObj = { ...state }\n\n        switch (event.target.id) {\n            case \"firstName\":\n                newObj.firstName = event.target.value\n                break;\n            case \"lastName\":\n                newObj.lastName = event.target.value\n                break;\n            case \"email\":\n                newObj.email = event.target.value\n                break;\n            case \"password\":\n                newObj.password = event.target.value\n                break;\n            default:\n                break;\n        }\n\n        setState(newObj)\n    }\n\n    const onClickHandler = () => {\n\n        // look for any empty fields\n        // tell the user to fill out all\n        // fields if one is empty\n        for (let prop in state) {\n            if (state[prop] === '') {\n                alert(\"Please fill out all fields.\")\n                return null\n            }\n        }\n\n        //create the user object\n        let user = {\n            firstName: state.firstName,\n            lastName: state.lastName,\n            email: state.email,\n            password: state.password,\n            admin: false\n        }\n\n        console.log(user)\n\n        //if all are filled\n        //create a new user\n        createNewUserNoToken(user)\n        .then(result => {\n\n            alert(\"User Created!\")\n            \n            // send the user to the sign in page\n            props.history.push('/')\n        })\n        .catch(error => {\n            alert(\"Creation failed\")\n        })\n\n\n\n    }\n\n    return (\n        <div>\n            <Paper elevation={3} style={{ padding: 16, margin: '25%' }}>\n                <div>\n                    <TextField required\n                        id=\"firstName\"\n                        label=\"First Name\"\n                        value={state.firstName}\n                        onChange={onChangeHandler}\n                    />\n                </div>\n                <div>\n                    <TextField required\n                        id=\"lastName\"\n                        label=\"Last Name\"\n                        value={state.lastName}\n                        onChange={onChangeHandler}\n                    />\n                </div>\n                <div>\n                    <TextField required\n                        id=\"email\"\n                        label=\"Email\"\n                        value={state.email}\n                        onChange={onChangeHandler}\n                    />\n                </div>\n                <div>\n                    <TextField required\n                        id=\"password\"\n                        label=\"Password\"\n                        type='password'\n                        value={state.password}\n                        onChange={onChangeHandler}\n                    />\n                </div>\n                <br />\n                <Button variant='contained' color='primary' onClick={onClickHandler}>Sign Up!</Button>\n                <Button color='secondary' onClick={() => { props.history.push('/') }}>Cancel</Button>\n\n            </Paper>\n\n        </div>\n    );\n}\n\nexport default SignUp;","import React from 'react';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom'\nimport ListOfTasks from './ListOfTasks';\nimport SignIn from './SignIn';\nimport {AuthProvider} from './AuthContext'\nimport {TasksProvider} from './TasksContext'\nimport ProtectedRoute from './ProtectedRoute'\nimport CreateUser from './CreateUser'\nimport Title from './Title'\nimport SignUp from './SignUp';\n\nfunction MainRouter(props) {\n    return (\n        <div>\n            <Router>\n                <AuthProvider>\n                    <TasksProvider>\n                    <Title></Title>\n                    <Switch>\n                        <ProtectedRoute path='/tasks' component={ListOfTasks} />\n                        <ProtectedRoute path='/create-user' component={CreateUser} />\n                        <Route path='/signup' component={SignUp} />\n                        <Route path='/' component={SignIn} />\n                    </Switch>\n                    </TasksProvider>\n                </AuthProvider>\n            </Router>\n            \n        </div>\n    );\n}\n\nexport default MainRouter;","import React from 'react';\nimport './App.css';\nimport MainRouter from './components/MainRouter';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainRouter></MainRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","\nconst currentApi = \"/tasks\"\nconst userApi = \"/users\"\nconst JWT_KEY = 'abc123'\nconst DUMMY_DATA = [\n    {\n        date: (new Date()).toLocaleDateString(),\n        text: \"My first task\",\n        isComplete: false\n    },\n    {\n        date: (new Date()).toLocaleDateString(),\n        text: \"My second task should start completed\",\n        isComplete: true\n    }\n\n]\n\n//const uriBase = \"http://localhost:5001\"\n//const uriBase = \"https://sn-todo.herokuapp.com\"\n\n// here we switch our uriBase according to the node environment\nconst uriBase = process.env.NODE_ENV !== 'production' ? (\n    \"http://localhost:5001\"\n) : (\n    \"\" // this is blank because heroku adds the base for us\n)\n\n\n\nmodule.exports.uriBase = uriBase\nmodule.exports.currentApi = currentApi\nmodule.exports.userApi = userApi\nmodule.exports.JWT_KEY = JWT_KEY\nmodule.exports.DUMMY_DATA = DUMMY_DATA"],"sourceRoot":""}